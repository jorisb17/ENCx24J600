
ethernet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00802000  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00802014  00802014  00000faa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000faa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b19  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035e0  00000000  00000000  00005c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ec  00000000  00000000  000091e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  0000a2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c51  00000000  00000000  0000a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001165  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000e366  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_2>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e2 e0       	ldi	r30, 0x02	; 2
 214:	ff e0       	ldi	r31, 0x0F	; 15
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a4 31       	cpi	r26, 0x14	; 20
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a4 e1       	ldi	r26, 0x14	; 20
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	aa 32       	cpi	r26, 0x2A	; 42
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <main>
 23a:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <ENC_SETETHRST>:
void ENC_ReSendUDPFrame()
{
	// wait for completion of ongoing transmission
	while (ENC_RCRU(ECON1) & ENC_ECON1_TXRTS_bm);

	ENC_SETTXRTS();		// start transmission
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 248:	8a ec       	ldi	r24, 0xCA	; 202
 24a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 24e:	e0 ec       	ldi	r30, 0xC0	; 192
 250:	f8 e0       	ldi	r31, 0x08	; 8
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	88 23       	and	r24, r24
 256:	ec f7       	brge	.-6      	; 0x252 <ENC_SETETHRST+0x10>
 258:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 262:	08 95       	ret

00000264 <ENC_CLREIE>:
 264:	80 e1       	ldi	r24, 0x10	; 16
 266:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 26a:	8e ee       	ldi	r24, 0xEE	; 238
 26c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 270:	e0 ec       	ldi	r30, 0xC0	; 192
 272:	f8 e0       	ldi	r31, 0x08	; 8
 274:	82 81       	ldd	r24, Z+2	; 0x02
 276:	88 23       	and	r24, r24
 278:	ec f7       	brge	.-6      	; 0x274 <ENC_CLREIE+0x10>
 27a:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 27e:	80 e1       	ldi	r24, 0x10	; 16
 280:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 284:	08 95       	ret

00000286 <ENC_DMACKSUM>:
 286:	80 e1       	ldi	r24, 0x10	; 16
 288:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 28c:	88 ed       	ldi	r24, 0xD8	; 216
 28e:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 292:	e0 ec       	ldi	r30, 0xC0	; 192
 294:	f8 e0       	ldi	r31, 0x08	; 8
 296:	82 81       	ldd	r24, Z+2	; 0x02
 298:	88 23       	and	r24, r24
 29a:	ec f7       	brge	.-6      	; 0x296 <ENC_DMACKSUM+0x10>
 29c:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2a0:	80 e1       	ldi	r24, 0x10	; 16
 2a2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 2a6:	08 95       	ret

000002a8 <ENC_RCRU>:
 2a8:	90 e1       	ldi	r25, 0x10	; 16
 2aa:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 2ae:	90 e2       	ldi	r25, 0x20	; 32
 2b0:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2b4:	e0 ec       	ldi	r30, 0xC0	; 192
 2b6:	f8 e0       	ldi	r31, 0x08	; 8
 2b8:	92 81       	ldd	r25, Z+2	; 0x02
 2ba:	99 23       	and	r25, r25
 2bc:	ec f7       	brge	.-6      	; 0x2b8 <ENC_RCRU+0x10>
 2be:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2c2:	e0 ec       	ldi	r30, 0xC0	; 192
 2c4:	f8 e0       	ldi	r31, 0x08	; 8
 2c6:	82 81       	ldd	r24, Z+2	; 0x02
 2c8:	88 23       	and	r24, r24
 2ca:	ec f7       	brge	.-6      	; 0x2c6 <ENC_RCRU+0x1e>
 2cc:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2d0:	e0 ec       	ldi	r30, 0xC0	; 192
 2d2:	f8 e0       	ldi	r31, 0x08	; 8
 2d4:	82 81       	ldd	r24, Z+2	; 0x02
 2d6:	88 23       	and	r24, r24
 2d8:	ec f7       	brge	.-6      	; 0x2d4 <ENC_RCRU+0x2c>
 2da:	e0 ec       	ldi	r30, 0xC0	; 192
 2dc:	f8 e0       	ldi	r31, 0x08	; 8
 2de:	23 81       	ldd	r18, Z+3	; 0x03
 2e0:	13 82       	std	Z+3, r1	; 0x03
 2e2:	82 81       	ldd	r24, Z+2	; 0x02
 2e4:	88 23       	and	r24, r24
 2e6:	ec f7       	brge	.-6      	; 0x2e2 <ENC_RCRU+0x3a>
 2e8:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2ec:	90 e1       	ldi	r25, 0x10	; 16
 2ee:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	98 2f       	mov	r25, r24
 2f6:	88 27       	eor	r24, r24
 2f8:	82 0f       	add	r24, r18
 2fa:	91 1d       	adc	r25, r1
 2fc:	08 95       	ret

000002fe <ENC_WCRU>:
 2fe:	90 e1       	ldi	r25, 0x10	; 16
 300:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 304:	92 e2       	ldi	r25, 0x22	; 34
 306:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 30a:	e0 ec       	ldi	r30, 0xC0	; 192
 30c:	f8 e0       	ldi	r31, 0x08	; 8
 30e:	92 81       	ldd	r25, Z+2	; 0x02
 310:	99 23       	and	r25, r25
 312:	ec f7       	brge	.-6      	; 0x30e <ENC_WCRU+0x10>
 314:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 318:	e0 ec       	ldi	r30, 0xC0	; 192
 31a:	f8 e0       	ldi	r31, 0x08	; 8
 31c:	82 81       	ldd	r24, Z+2	; 0x02
 31e:	88 23       	and	r24, r24
 320:	ec f7       	brge	.-6      	; 0x31c <ENC_WCRU+0x1e>
 322:	60 93 c3 08 	sts	0x08C3, r22	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 326:	e0 ec       	ldi	r30, 0xC0	; 192
 328:	f8 e0       	ldi	r31, 0x08	; 8
 32a:	82 81       	ldd	r24, Z+2	; 0x02
 32c:	88 23       	and	r24, r24
 32e:	ec f7       	brge	.-6      	; 0x32a <ENC_WCRU+0x2c>
 330:	70 93 c3 08 	sts	0x08C3, r23	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 334:	e0 ec       	ldi	r30, 0xC0	; 192
 336:	f8 e0       	ldi	r31, 0x08	; 8
 338:	82 81       	ldd	r24, Z+2	; 0x02
 33a:	88 23       	and	r24, r24
 33c:	ec f7       	brge	.-6      	; 0x338 <ENC_WCRU+0x3a>
 33e:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 348:	08 95       	ret

0000034a <ENC_SETEIE>:
 34a:	60 e4       	ldi	r22, 0x40	; 64
 34c:	70 e8       	ldi	r23, 0x80	; 128
 34e:	82 e7       	ldi	r24, 0x72	; 114
 350:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ENC_WCRU>
 354:	08 95       	ret

00000356 <ENC_BFSU>:
 356:	90 e1       	ldi	r25, 0x10	; 16
 358:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 35c:	94 e2       	ldi	r25, 0x24	; 36
 35e:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 362:	e0 ec       	ldi	r30, 0xC0	; 192
 364:	f8 e0       	ldi	r31, 0x08	; 8
 366:	92 81       	ldd	r25, Z+2	; 0x02
 368:	99 23       	and	r25, r25
 36a:	ec f7       	brge	.-6      	; 0x366 <ENC_BFSU+0x10>
 36c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 370:	e0 ec       	ldi	r30, 0xC0	; 192
 372:	f8 e0       	ldi	r31, 0x08	; 8
 374:	82 81       	ldd	r24, Z+2	; 0x02
 376:	88 23       	and	r24, r24
 378:	ec f7       	brge	.-6      	; 0x374 <ENC_BFSU+0x1e>
 37a:	60 93 c3 08 	sts	0x08C3, r22	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 37e:	e0 ec       	ldi	r30, 0xC0	; 192
 380:	f8 e0       	ldi	r31, 0x08	; 8
 382:	82 81       	ldd	r24, Z+2	; 0x02
 384:	88 23       	and	r24, r24
 386:	ec f7       	brge	.-6      	; 0x382 <ENC_BFSU+0x2c>
 388:	70 93 c3 08 	sts	0x08C3, r23	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 38c:	e0 ec       	ldi	r30, 0xC0	; 192
 38e:	f8 e0       	ldi	r31, 0x08	; 8
 390:	82 81       	ldd	r24, Z+2	; 0x02
 392:	88 23       	and	r24, r24
 394:	ec f7       	brge	.-6      	; 0x390 <ENC_BFSU+0x3a>
 396:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 39a:	80 e1       	ldi	r24, 0x10	; 16
 39c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 3a0:	08 95       	ret

000003a2 <ENC_BFCU>:
 3a2:	90 e1       	ldi	r25, 0x10	; 16
 3a4:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 3a8:	96 e2       	ldi	r25, 0x26	; 38
 3aa:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 3ae:	e0 ec       	ldi	r30, 0xC0	; 192
 3b0:	f8 e0       	ldi	r31, 0x08	; 8
 3b2:	92 81       	ldd	r25, Z+2	; 0x02
 3b4:	99 23       	and	r25, r25
 3b6:	ec f7       	brge	.-6      	; 0x3b2 <ENC_BFCU+0x10>
 3b8:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 3bc:	e0 ec       	ldi	r30, 0xC0	; 192
 3be:	f8 e0       	ldi	r31, 0x08	; 8
 3c0:	82 81       	ldd	r24, Z+2	; 0x02
 3c2:	88 23       	and	r24, r24
 3c4:	ec f7       	brge	.-6      	; 0x3c0 <ENC_BFCU+0x1e>
 3c6:	60 93 c3 08 	sts	0x08C3, r22	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 3ca:	e0 ec       	ldi	r30, 0xC0	; 192
 3cc:	f8 e0       	ldi	r31, 0x08	; 8
 3ce:	82 81       	ldd	r24, Z+2	; 0x02
 3d0:	88 23       	and	r24, r24
 3d2:	ec f7       	brge	.-6      	; 0x3ce <ENC_BFCU+0x2c>
 3d4:	70 93 c3 08 	sts	0x08C3, r23	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 3d8:	e0 ec       	ldi	r30, 0xC0	; 192
 3da:	f8 e0       	ldi	r31, 0x08	; 8
 3dc:	82 81       	ldd	r24, Z+2	; 0x02
 3de:	88 23       	and	r24, r24
 3e0:	ec f7       	brge	.-6      	; 0x3dc <ENC_BFCU+0x3a>
 3e2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 3e6:	80 e1       	ldi	r24, 0x10	; 16
 3e8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 3ec:	08 95       	ret

000003ee <ENC_Init>:
 3ee:	64 e3       	ldi	r22, 0x34	; 52
 3f0:	72 e1       	ldi	r23, 0x12	; 18
 3f2:	86 e1       	ldi	r24, 0x16	; 22
 3f4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ENC_WCRU>
 3f8:	86 e1       	ldi	r24, 0x16	; 22
 3fa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ENC_RCRU>
 3fe:	84 33       	cpi	r24, 0x34	; 52
 400:	92 41       	sbci	r25, 0x12	; 18
 402:	a9 f7       	brne	.-22     	; 0x3ee <ENC_Init>
 404:	8a e1       	ldi	r24, 0x1A	; 26
 406:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ENC_RCRU>
 40a:	94 ff       	sbrs	r25, 4
 40c:	fb cf       	rjmp	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40e:	0e 94 21 01 	call	0x242	; 0x242 <ENC_SETETHRST>
 412:	80 e1       	ldi	r24, 0x10	; 16
 414:	8a 95       	dec	r24
 416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	86 e1       	ldi	r24, 0x16	; 22
 41c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ENC_RCRU>
 420:	89 2b       	or	r24, r25
 422:	59 f5       	brne	.+86     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 424:	26 ea       	ldi	r18, 0xA6	; 166
 426:	2a 95       	dec	r18
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	70 ee       	ldi	r23, 0xE0	; 224
 430:	8e e6       	ldi	r24, 0x6E	; 110
 432:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ENC_WCRU>
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ENC_RCRU>
 43c:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <__data_end>
 440:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <__data_end+0x1>
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	84 e3       	ldi	r24, 0x34	; 52
 44a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <ENC_BFCU>
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	8e e1       	ldi	r24, 0x1E	; 30
 454:	0e 94 ab 01 	call	0x356	; 0x356 <ENC_BFSU>
 458:	e0 e6       	ldi	r30, 0x60	; 96
 45a:	f6 e0       	ldi	r31, 0x06	; 6
 45c:	8a e1       	ldi	r24, 0x1A	; 26
 45e:	80 8b       	std	Z+16, r24	; 0x10
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	82 87       	std	Z+10, r24	; 0x0a
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	81 87       	std	Z+9, r24	; 0x09
 468:	e0 ea       	ldi	r30, 0xA0	; 160
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	82 81       	ldd	r24, Z+2	; 0x02
 46e:	82 60       	ori	r24, 0x02	; 2
 470:	82 83       	std	Z+2, r24	; 0x02
 472:	0e 94 a5 01 	call	0x34a	; 0x34a <ENC_SETEIE>
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	08 95       	ret

0000047e <ENC_WGPWRPT>:
 47e:	20 e1       	ldi	r18, 0x10	; 16
 480:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 484:	2c e6       	ldi	r18, 0x6C	; 108
 486:	20 93 c3 08 	sts	0x08C3, r18	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 48a:	e0 ec       	ldi	r30, 0xC0	; 192
 48c:	f8 e0       	ldi	r31, 0x08	; 8
 48e:	22 81       	ldd	r18, Z+2	; 0x02
 490:	22 23       	and	r18, r18
 492:	ec f7       	brge	.-6      	; 0x48e <ENC_WGPWRPT+0x10>
 494:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 498:	e0 ec       	ldi	r30, 0xC0	; 192
 49a:	f8 e0       	ldi	r31, 0x08	; 8
 49c:	82 81       	ldd	r24, Z+2	; 0x02
 49e:	88 23       	and	r24, r24
 4a0:	ec f7       	brge	.-6      	; 0x49c <ENC_WGPWRPT+0x1e>
 4a2:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 4a6:	e0 ec       	ldi	r30, 0xC0	; 192
 4a8:	f8 e0       	ldi	r31, 0x08	; 8
 4aa:	82 81       	ldd	r24, Z+2	; 0x02
 4ac:	88 23       	and	r24, r24
 4ae:	ec f7       	brge	.-6      	; 0x4aa <ENC_WGPWRPT+0x2c>
 4b0:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 4b4:	80 e1       	ldi	r24, 0x10	; 16
 4b6:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 4ba:	08 95       	ret

000004bc <ENC_SETTXRTS>:
 4bc:	80 e1       	ldi	r24, 0x10	; 16
 4be:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 4c2:	84 ed       	ldi	r24, 0xD4	; 212
 4c4:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 4c8:	e0 ec       	ldi	r30, 0xC0	; 192
 4ca:	f8 e0       	ldi	r31, 0x08	; 8
 4cc:	82 81       	ldd	r24, Z+2	; 0x02
 4ce:	88 23       	and	r24, r24
 4d0:	ec f7       	brge	.-6      	; 0x4cc <ENC_SETTXRTS+0x10>
 4d2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 4d6:	80 e1       	ldi	r24, 0x10	; 16
 4d8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 4dc:	08 95       	ret

000004de <ENC_RdUDPFrame>:
//		SourcePort	- source port (0 if not used)
//		DestPort	- destination port
//		Data		- received data
// Since 'data' array is dynamically allocated IT IS NECESSARY TO FREE IT WHEN NO LONGER NEEDED.
int8_t ENC_RdUDPFrame(uint8_t *SourceAddr, uint8_t *DestAddr, uint16_t *SourcePort, uint16_t *DestPort, uint16_t *Len, uint8_t **Data)
{
 4de:	4f 92       	push	r4
 4e0:	5f 92       	push	r5
 4e2:	6f 92       	push	r6
 4e4:	7f 92       	push	r7
 4e6:	8f 92       	push	r8
 4e8:	9f 92       	push	r9
 4ea:	af 92       	push	r10
 4ec:	bf 92       	push	r11
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
 502:	6c 97       	sbiw	r28, 0x1c	; 28
 504:	cd bf       	out	0x3d, r28	; 61
 506:	de bf       	out	0x3e, r29	; 62
 508:	4c 01       	movw	r8, r24
 50a:	5b 01       	movw	r10, r22
 50c:	3a 01       	movw	r6, r20
 50e:	29 01       	movw	r4, r18

	// wait for packet reception (PacKeTCouNT > 0) => check interrupt at PC.0
	//while (!(ENC_RCRU(ESTAT) & ENC_ESTAT_PKTCNT_bm));

	// NextPacketPointer => ERXRDPT (receive buffer read pointer)
	ENC_WCRU(ERXRDPT, NextPacketPointer);
 510:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <__data_end>
 514:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <__data_end+0x1>
 518:	8a e8       	ldi	r24, 0x8A	; 138
 51a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ENC_WCRU>

	SPI_CS_ON;
 51e:	80 e1       	ldi	r24, 0x10	; 16
 520:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	SPIC.DATA = RRXDATA;	// command for sequential reading from receive buffer
 524:	8c e2       	ldi	r24, 0x2C	; 44
 526:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	SPI_WAIT;
 52a:	e0 ec       	ldi	r30, 0xC0	; 192
 52c:	f8 e0       	ldi	r31, 0x08	; 8
 52e:	82 81       	ldd	r24, Z+2	; 0x02
 530:	88 23       	and	r24, r24
 532:	ec f7       	brge	.-6      	; 0x52e <ENC_RdUDPFrame+0x50>
	// read address of the next packet and write to NextPacketPointer
	// lo byte
	SPIC.DATA = DUMMY;
 534:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	SPI_WAIT;
 538:	e0 ec       	ldi	r30, 0xC0	; 192
 53a:	f8 e0       	ldi	r31, 0x08	; 8
 53c:	82 81       	ldd	r24, Z+2	; 0x02
 53e:	88 23       	and	r24, r24
 540:	ec f7       	brge	.-6      	; 0x53c <ENC_RdUDPFrame+0x5e>
	lo = SPIC.DATA;
 542:	e0 ec       	ldi	r30, 0xC0	; 192
 544:	f8 e0       	ldi	r31, 0x08	; 8
 546:	93 81       	ldd	r25, Z+3	; 0x03
	// hi byte
	SPIC.DATA = DUMMY;
 548:	13 82       	std	Z+3, r1	; 0x03
	SPI_WAIT;
 54a:	82 81       	ldd	r24, Z+2	; 0x02
 54c:	88 23       	and	r24, r24
 54e:	ec f7       	brge	.-6      	; 0x54a <ENC_RdUDPFrame+0x6c>
	hi = SPIC.DATA;
 550:	c0 90 c3 08 	lds	r12, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	NextPacketPointer = lo + ((uint16_t)hi<<8);
 554:	d1 2c       	mov	r13, r1
 556:	dc 2c       	mov	r13, r12
 558:	cc 24       	eor	r12, r12
 55a:	c9 0e       	add	r12, r25
 55c:	d1 1c       	adc	r13, r1
 55e:	c0 92 14 20 	sts	0x2014, r12	; 0x802014 <__data_end>
 562:	d0 92 15 20 	sts	0x2015, r13	; 0x802015 <__data_end+0x1>
 566:	96 e0       	ldi	r25, 0x06	; 6

	// read Receive Status Vector (6 bytes)
	uint8_t RSV[6];
	for(uint8_t i = 0; i < 6; i++)
	{
		SPIC.DATA = DUMMY;
 568:	e0 ec       	ldi	r30, 0xC0	; 192
 56a:	f8 e0       	ldi	r31, 0x08	; 8
 56c:	13 82       	std	Z+3, r1	; 0x03
		SPI_WAIT;
 56e:	82 81       	ldd	r24, Z+2	; 0x02
 570:	88 23       	and	r24, r24
 572:	ec f7       	brge	.-6      	; 0x56e <ENC_RdUDPFrame+0x90>
		RSV[i] = SPIC.DATA;
 574:	83 81       	ldd	r24, Z+3	; 0x03
 576:	91 50       	subi	r25, 0x01	; 1
	hi = SPIC.DATA;
	NextPacketPointer = lo + ((uint16_t)hi<<8);

	// read Receive Status Vector (6 bytes)
	uint8_t RSV[6];
	for(uint8_t i = 0; i < 6; i++)
 578:	c9 f7       	brne	.-14     	; 0x56c <ENC_RdUDPFrame+0x8e>
 57a:	9c e0       	ldi	r25, 0x0C	; 12

	// Ethernet header
	// discard destination and source MAC addresses
	for (uint8_t i = 0; i < 12; i++)
	{
		SPIC.DATA = DUMMY;
 57c:	e0 ec       	ldi	r30, 0xC0	; 192
 57e:	f8 e0       	ldi	r31, 0x08	; 8
 580:	13 82       	std	Z+3, r1	; 0x03
		SPI_WAIT;
 582:	82 81       	ldd	r24, Z+2	; 0x02
 584:	88 23       	and	r24, r24
 586:	ec f7       	brge	.-6      	; 0x582 <ENC_RdUDPFrame+0xa4>
		dummy = SPIC.DATA;
 588:	83 81       	ldd	r24, Z+3	; 0x03
 58a:	91 50       	subi	r25, 0x01	; 1
	}
	// int16_t count = ((uint16_t)(RSV[0])<<8) + RSV[1];	// total packet size

	// Ethernet header
	// discard destination and source MAC addresses
	for (uint8_t i = 0; i < 12; i++)
 58c:	c9 f7       	brne	.-14     	; 0x580 <ENC_RdUDPFrame+0xa2>
		SPIC.DATA = DUMMY;
		SPI_WAIT;
		dummy = SPIC.DATA;
	}
	// Ethertype
	SPIC.DATA = DUMMY;
 58e:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	SPI_WAIT;
 592:	e0 ec       	ldi	r30, 0xC0	; 192
 594:	f8 e0       	ldi	r31, 0x08	; 8
 596:	82 81       	ldd	r24, Z+2	; 0x02
 598:	88 23       	and	r24, r24
 59a:	ec f7       	brge	.-6      	; 0x596 <ENC_RdUDPFrame+0xb8>
	hi = SPIC.DATA;
 59c:	e0 ec       	ldi	r30, 0xC0	; 192
 59e:	f8 e0       	ldi	r31, 0x08	; 8
 5a0:	93 81       	ldd	r25, Z+3	; 0x03
	SPIC.DATA = DUMMY;
 5a2:	13 82       	std	Z+3, r1	; 0x03
	SPI_WAIT;
 5a4:	82 81       	ldd	r24, Z+2	; 0x02
 5a6:	88 23       	and	r24, r24
 5a8:	ec f7       	brge	.-6      	; 0x5a4 <ENC_RdUDPFrame+0xc6>
	lo = SPIC.DATA;
 5aa:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	if(hi==0x08 && lo==0)	// IPv4 frame ?
 5ae:	98 30       	cpi	r25, 0x08	; 8
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <ENC_RdUDPFrame+0xd6>
 5b2:	9b c0       	rjmp	.+310    	; 0x6ea <ENC_RdUDPFrame+0x20c>
 5b4:	81 11       	cpse	r24, r1
 5b6:	9b c0       	rjmp	.+310    	; 0x6ee <ENC_RdUDPFrame+0x210>
 5b8:	de 01       	movw	r26, r28
 5ba:	11 96       	adiw	r26, 0x01	; 1
 5bc:	9e 01       	movw	r18, r28
 5be:	2b 5e       	subi	r18, 0xEB	; 235
 5c0:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		// Read IPv4 header
		uint8_t IPv4Header[20];		// 20 bytes header - options, if present, will be ignored
		for(uint8_t i = 0; i < 20; i++)
		{
			SPIC.DATA = DUMMY;
 5c2:	e0 ec       	ldi	r30, 0xC0	; 192
 5c4:	f8 e0       	ldi	r31, 0x08	; 8
 5c6:	13 82       	std	Z+3, r1	; 0x03
			SPI_WAIT;
 5c8:	82 81       	ldd	r24, Z+2	; 0x02
 5ca:	88 23       	and	r24, r24
 5cc:	ec f7       	brge	.-6      	; 0x5c8 <ENC_RdUDPFrame+0xea>
			IPv4Header[i] = SPIC.DATA;
 5ce:	83 81       	ldd	r24, Z+3	; 0x03
 5d0:	8d 93       	st	X+, r24
	lo = SPIC.DATA;
	if(hi==0x08 && lo==0)	// IPv4 frame ?
	{
		// Read IPv4 header
		uint8_t IPv4Header[20];		// 20 bytes header - options, if present, will be ignored
		for(uint8_t i = 0; i < 20; i++)
 5d2:	2a 17       	cp	r18, r26
 5d4:	3b 07       	cpc	r19, r27
 5d6:	b9 f7       	brne	.-18     	; 0x5c6 <ENC_RdUDPFrame+0xe8>
			SPIC.DATA = DUMMY;
			SPI_WAIT;
			IPv4Header[i] = SPIC.DATA;
		}

		uint8_t hlen = 4 * (IPv4Header[0] & 0x0f);	// header length in bytes
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	28 2f       	mov	r18, r24
 5dc:	2f 70       	andi	r18, 0x0F	; 15
 5de:	22 0f       	add	r18, r18
 5e0:	22 0f       	add	r18, r18
		uint8_t version = (IPv4Header[0]>>4) & 0x0f;
 5e2:	38 2f       	mov	r19, r24
 5e4:	32 95       	swap	r19
 5e6:	3f 70       	andi	r19, 0x0F	; 15
		// skip options, if exist
		for(uint8_t i = 20; i < hlen; i++)
 5e8:	25 31       	cpi	r18, 0x15	; 21
 5ea:	58 f0       	brcs	.+22     	; 0x602 <ENC_RdUDPFrame+0x124>
 5ec:	94 e1       	ldi	r25, 0x14	; 20
		{
			SPIC.DATA = DUMMY;
 5ee:	e0 ec       	ldi	r30, 0xC0	; 192
 5f0:	f8 e0       	ldi	r31, 0x08	; 8
 5f2:	13 82       	std	Z+3, r1	; 0x03
			SPI_WAIT;
 5f4:	82 81       	ldd	r24, Z+2	; 0x02
 5f6:	88 23       	and	r24, r24
 5f8:	ec f7       	brge	.-6      	; 0x5f4 <ENC_RdUDPFrame+0x116>
			dummy = SPIC.DATA;
 5fa:	83 81       	ldd	r24, Z+3	; 0x03
		}

		uint8_t hlen = 4 * (IPv4Header[0] & 0x0f);	// header length in bytes
		uint8_t version = (IPv4Header[0]>>4) & 0x0f;
		// skip options, if exist
		for(uint8_t i = 20; i < hlen; i++)
 5fc:	9f 5f       	subi	r25, 0xFF	; 255
 5fe:	29 13       	cpse	r18, r25
 600:	f8 cf       	rjmp	.-16     	; 0x5f2 <ENC_RdUDPFrame+0x114>
			SPIC.DATA = DUMMY;
			SPI_WAIT;
			dummy = SPIC.DATA;
		}

		if (version == 4)	// IPv4
 602:	34 30       	cpi	r19, 0x04	; 4
 604:	09 f0       	breq	.+2      	; 0x608 <ENC_RdUDPFrame+0x12a>
 606:	6d c0       	rjmp	.+218    	; 0x6e2 <ENC_RdUDPFrame+0x204>
		{
			// total length
			uint16_t totalLen = ((uint16_t)(IPv4Header[2])<<8) + IPv4Header[3];

			// Check higher level protocol
			if (IPv4Header[9] == PROTOCOL_UDP)
 608:	8a 85       	ldd	r24, Y+10	; 0x0a
 60a:	81 31       	cpi	r24, 0x11	; 17
 60c:	09 f0       	breq	.+2      	; 0x610 <ENC_RdUDPFrame+0x132>
 60e:	6b c0       	rjmp	.+214    	; 0x6e6 <ENC_RdUDPFrame+0x208>
			{
				// header checksum - IPv4Header[10..11] (CALCULATE through ENC DMA)
				// source IP
				SourceAddr[0] = IPv4Header[12];
 610:	8d 85       	ldd	r24, Y+13	; 0x0d
 612:	d4 01       	movw	r26, r8
 614:	8c 93       	st	X, r24
				SourceAddr[1] = IPv4Header[13];
 616:	8e 85       	ldd	r24, Y+14	; 0x0e
 618:	11 96       	adiw	r26, 0x01	; 1
 61a:	8c 93       	st	X, r24
 61c:	11 97       	sbiw	r26, 0x01	; 1
				SourceAddr[2] = IPv4Header[14];
 61e:	8f 85       	ldd	r24, Y+15	; 0x0f
 620:	12 96       	adiw	r26, 0x02	; 2
 622:	8c 93       	st	X, r24
 624:	12 97       	sbiw	r26, 0x02	; 2
				SourceAddr[3] = IPv4Header[15];
 626:	88 89       	ldd	r24, Y+16	; 0x10
 628:	13 96       	adiw	r26, 0x03	; 3
 62a:	8c 93       	st	X, r24

				// destination IP
				DestAddr[0] = IPv4Header[16];
 62c:	89 89       	ldd	r24, Y+17	; 0x11
 62e:	f5 01       	movw	r30, r10
 630:	80 83       	st	Z, r24
				DestAddr[1] = IPv4Header[17];
 632:	8a 89       	ldd	r24, Y+18	; 0x12
 634:	81 83       	std	Z+1, r24	; 0x01
				DestAddr[2] = IPv4Header[18];
 636:	8b 89       	ldd	r24, Y+19	; 0x13
 638:	82 83       	std	Z+2, r24	; 0x02
				DestAddr[3] = IPv4Header[19];
 63a:	8c 89       	ldd	r24, Y+20	; 0x14
 63c:	83 83       	std	Z+3, r24	; 0x03
 63e:	de 01       	movw	r26, r28
 640:	55 96       	adiw	r26, 0x15	; 21
 642:	9e 01       	movw	r18, r28
 644:	23 5e       	subi	r18, 0xE3	; 227
 646:	3f 4f       	sbci	r19, 0xFF	; 255

				uint8_t UDPHeader[8];
				for(uint8_t i = 0; i < 8; i++)
				{
					SPIC.DATA = DUMMY;
 648:	e0 ec       	ldi	r30, 0xC0	; 192
 64a:	f8 e0       	ldi	r31, 0x08	; 8
 64c:	13 82       	std	Z+3, r1	; 0x03
					SPI_WAIT;
 64e:	82 81       	ldd	r24, Z+2	; 0x02
 650:	88 23       	and	r24, r24
 652:	ec f7       	brge	.-6      	; 0x64e <ENC_RdUDPFrame+0x170>
					UDPHeader[i] = SPIC.DATA;
 654:	83 81       	ldd	r24, Z+3	; 0x03
 656:	8d 93       	st	X+, r24
				DestAddr[1] = IPv4Header[17];
				DestAddr[2] = IPv4Header[18];
				DestAddr[3] = IPv4Header[19];

				uint8_t UDPHeader[8];
				for(uint8_t i = 0; i < 8; i++)
 658:	2a 17       	cp	r18, r26
 65a:	3b 07       	cpc	r19, r27
 65c:	b9 f7       	brne	.-18     	; 0x64c <ENC_RdUDPFrame+0x16e>
				{
					SPIC.DATA = DUMMY;
					SPI_WAIT;
					UDPHeader[i] = SPIC.DATA;
				}
				*SourcePort = ((uint16_t)(UDPHeader[0])<<8) + UDPHeader[1];
 65e:	8d 89       	ldd	r24, Y+21	; 0x15
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	98 2f       	mov	r25, r24
 664:	88 27       	eor	r24, r24
 666:	2e 89       	ldd	r18, Y+22	; 0x16
 668:	82 0f       	add	r24, r18
 66a:	91 1d       	adc	r25, r1
 66c:	d3 01       	movw	r26, r6
 66e:	8d 93       	st	X+, r24
 670:	9c 93       	st	X, r25
				*DestPort = ((uint16_t)(UDPHeader[2])<<8) + UDPHeader[3];
 672:	8f 89       	ldd	r24, Y+23	; 0x17
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	98 2f       	mov	r25, r24
 678:	88 27       	eor	r24, r24
 67a:	28 8d       	ldd	r18, Y+24	; 0x18
 67c:	82 0f       	add	r24, r18
 67e:	91 1d       	adc	r25, r1
 680:	f2 01       	movw	r30, r4
 682:	80 83       	st	Z, r24
 684:	91 83       	std	Z+1, r25	; 0x01
				*Len = ((uint16_t)(UDPHeader[4])<<8) + UDPHeader[5] - 8;
 686:	89 8d       	ldd	r24, Y+25	; 0x19
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	38 2f       	mov	r19, r24
 68c:	22 27       	eor	r18, r18
 68e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	08 97       	sbiw	r24, 0x08	; 8
 694:	82 0f       	add	r24, r18
 696:	93 1f       	adc	r25, r19
 698:	d8 01       	movw	r26, r16
 69a:	8d 93       	st	X+, r24
 69c:	9c 93       	st	X, r25
				// Checksum (ignored)

				// Data - check size of receive buffer
				*Data = malloc(*Len);
 69e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <malloc>
 6a2:	f7 01       	movw	r30, r14
 6a4:	80 83       	st	Z, r24
 6a6:	91 83       	std	Z+1, r25	; 0x01
				// receive data
				for(uint16_t i = 0; i < *Len; i++)
 6a8:	d8 01       	movw	r26, r16
 6aa:	8d 91       	ld	r24, X+
 6ac:	9c 91       	ld	r25, X
 6ae:	89 2b       	or	r24, r25
 6b0:	b1 f0       	breq	.+44     	; 0x6de <ENC_RdUDPFrame+0x200>
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	30 e0       	ldi	r19, 0x00	; 0
				{
					SPIC.DATA = DUMMY;
 6b6:	e0 ec       	ldi	r30, 0xC0	; 192
 6b8:	f8 e0       	ldi	r31, 0x08	; 8
 6ba:	13 82       	std	Z+3, r1	; 0x03
					SPI_WAIT;
 6bc:	82 81       	ldd	r24, Z+2	; 0x02
 6be:	88 23       	and	r24, r24
 6c0:	ec f7       	brge	.-6      	; 0x6bc <ENC_RdUDPFrame+0x1de>
					Data[i] = SPIC.DATA;
 6c2:	83 81       	ldd	r24, Z+3	; 0x03
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	d7 01       	movw	r26, r14
 6c8:	8d 93       	st	X+, r24
 6ca:	9d 93       	st	X+, r25
 6cc:	7d 01       	movw	r14, r26
				// Checksum (ignored)

				// Data - check size of receive buffer
				*Data = malloc(*Len);
				// receive data
				for(uint16_t i = 0; i < *Len; i++)
 6ce:	2f 5f       	subi	r18, 0xFF	; 255
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	d8 01       	movw	r26, r16
 6d4:	8d 91       	ld	r24, X+
 6d6:	9c 91       	ld	r25, X
 6d8:	28 17       	cp	r18, r24
 6da:	39 07       	cpc	r19, r25
 6dc:	70 f3       	brcs	.-36     	; 0x6ba <ENC_RdUDPFrame+0x1dc>
// Since 'data' array is dynamically allocated IT IS NECESSARY TO FREE IT WHEN NO LONGER NEEDED.
int8_t ENC_RdUDPFrame(uint8_t *SourceAddr, uint8_t *DestAddr, uint16_t *SourcePort, uint16_t *DestPort, uint16_t *Len, uint8_t **Data)
{
	uint8_t dummy;
	uint8_t lo, hi;
	int8_t errorCode = 0;
 6de:	10 e0       	ldi	r17, 0x00	; 0
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <ENC_RdUDPFrame+0x212>
				}
			}
			else errorCode = ENC_ERR_NOUDP;

		}
		else errorCode = ENC_ERR_NOIPv4;
 6e2:	1e ef       	ldi	r17, 0xFE	; 254
 6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <ENC_RdUDPFrame+0x212>
					SPIC.DATA = DUMMY;
					SPI_WAIT;
					Data[i] = SPIC.DATA;
				}
			}
			else errorCode = ENC_ERR_NOUDP;
 6e6:	1d ef       	ldi	r17, 0xFD	; 253
	hi = SPIC.DATA;
	SPIC.DATA = DUMMY;
	SPI_WAIT;
	lo = SPIC.DATA;
	if(hi==0x08 && lo==0)	// IPv4 frame ?
	{
 6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <ENC_RdUDPFrame+0x212>

		}
		else errorCode = ENC_ERR_NOIPv4;

	}
	else errorCode = ENC_ERR_NOIPv4;
 6ea:	1e ef       	ldi	r17, 0xFE	; 254
 6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <ENC_RdUDPFrame+0x212>
 6ee:	1e ef       	ldi	r17, 0xFE	; 254


	SPI_CS_OFF;		// terminate command for sequential reading from receive buffer
 6f0:	80 e1       	ldi	r24, 0x10	; 16
 6f2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>

	//update RXTAIL pointer
	int16_t newTail;
	if (NextPacketPointer == 0) newTail = 0x5ffe;
 6f6:	c1 14       	cp	r12, r1
 6f8:	d1 04       	cpc	r13, r1
 6fa:	21 f0       	breq	.+8      	; 0x704 <ENC_RdUDPFrame+0x226>
	else newTail = NextPacketPointer - 2;
 6fc:	b6 01       	movw	r22, r12
 6fe:	62 50       	subi	r22, 0x02	; 2
 700:	71 09       	sbc	r23, r1
 702:	02 c0       	rjmp	.+4      	; 0x708 <ENC_RdUDPFrame+0x22a>

	SPI_CS_OFF;		// terminate command for sequential reading from receive buffer

	//update RXTAIL pointer
	int16_t newTail;
	if (NextPacketPointer == 0) newTail = 0x5ffe;
 704:	6e ef       	ldi	r22, 0xFE	; 254
 706:	7f e5       	ldi	r23, 0x5F	; 95
	else newTail = NextPacketPointer - 2;
	ENC_WCRU(ERXTAIL, newTail);
 708:	86 e0       	ldi	r24, 0x06	; 6
 70a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ENC_WCRU>

	// Decrement PKTCNT by asserting ECON1.PKTDEC
	//ENC_WCRU(ECON1, ENC_RCRU(ECON1) | ENC_ECON1_PKTDEC_bm);
	ENC_BFSU(ECON1, ENC_ECON1_PKTDEC_bm);
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	71 e0       	ldi	r23, 0x01	; 1
 712:	8e e1       	ldi	r24, 0x1E	; 30
 714:	0e 94 ab 01 	call	0x356	; 0x356 <ENC_BFSU>

	return errorCode;
}
 718:	81 2f       	mov	r24, r17
 71a:	6c 96       	adiw	r28, 0x1c	; 28
 71c:	cd bf       	out	0x3d, r28	; 61
 71e:	de bf       	out	0x3e, r29	; 62
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	ff 90       	pop	r15
 72a:	ef 90       	pop	r14
 72c:	df 90       	pop	r13
 72e:	cf 90       	pop	r12
 730:	bf 90       	pop	r11
 732:	af 90       	pop	r10
 734:	9f 90       	pop	r9
 736:	8f 90       	pop	r8
 738:	7f 90       	pop	r7
 73a:	6f 90       	pop	r6
 73c:	5f 90       	pop	r5
 73e:	4f 90       	pop	r4
 740:	08 95       	ret

00000742 <GenerateIPv4HeaderChecksum>:


// Calculate IPv4 Header checksum and update header
// Used to send proper IPv4 packet
void GenerateIPv4HeaderChecksum(uint8_t *Header)
{
 742:	cf 93       	push	r28
 744:	fc 01       	movw	r30, r24
	// clear checksum
	Header[10] = 0;
 746:	12 86       	std	Z+10, r1	; 0x0a
	Header[11] = 0;
 748:	13 86       	std	Z+11, r1	; 0x0b
	uint32_t sum = 0;
	uint8_t hlen = 4 * (Header[0] & 0x0f);	// header length in bytes
 74a:	c0 81       	ld	r28, Z
 74c:	cf 70       	andi	r28, 0x0F	; 15
 74e:	cc 0f       	add	r28, r28
 750:	cc 0f       	add	r28, r28
	// sum
	for(uint8_t i = 0; i < hlen; i+=2)
 752:	39 f1       	breq	.+78     	; 0x7a2 <GenerateIPv4HeaderChecksum+0x60>
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	ba 01       	movw	r22, r20
	{
		sum += ((uint16_t)(Header[i])<<8) + Header[i+1];
 75c:	df 01       	movw	r26, r30
 75e:	a8 0f       	add	r26, r24
 760:	b1 1d       	adc	r27, r1
 762:	2c 91       	ld	r18, X
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	32 2f       	mov	r19, r18
 768:	22 27       	eor	r18, r18
 76a:	11 96       	adiw	r26, 0x01	; 1
 76c:	9c 91       	ld	r25, X
 76e:	29 0f       	add	r18, r25
 770:	31 1d       	adc	r19, r1
 772:	42 0f       	add	r20, r18
 774:	53 1f       	adc	r21, r19
 776:	61 1d       	adc	r22, r1
 778:	71 1d       	adc	r23, r1
	Header[10] = 0;
	Header[11] = 0;
	uint32_t sum = 0;
	uint8_t hlen = 4 * (Header[0] & 0x0f);	// header length in bytes
	// sum
	for(uint8_t i = 0; i < hlen; i+=2)
 77a:	8e 5f       	subi	r24, 0xFE	; 254
 77c:	8c 17       	cp	r24, r28
 77e:	70 f3       	brcs	.-36     	; 0x75c <GenerateIPv4HeaderChecksum+0x1a>
	{
		sum += ((uint16_t)(Header[i])<<8) + Header[i+1];
	}
	// add carry
	uint8_t carry;
	while (((carry = (sum & 0xffff0000) >> 16)) != 0)
 780:	cb 01       	movw	r24, r22
 782:	aa 27       	eor	r26, r26
 784:	bb 27       	eor	r27, r27
 786:	88 23       	and	r24, r24
 788:	79 f0       	breq	.+30     	; 0x7a8 <GenerateIPv4HeaderChecksum+0x66>
	{
		sum &= 0x0000ffff;
 78a:	66 27       	eor	r22, r22
 78c:	77 27       	eor	r23, r23
		sum += carry;
 78e:	48 0f       	add	r20, r24
 790:	51 1d       	adc	r21, r1
 792:	61 1d       	adc	r22, r1
 794:	71 1d       	adc	r23, r1
	{
		sum += ((uint16_t)(Header[i])<<8) + Header[i+1];
	}
	// add carry
	uint8_t carry;
	while (((carry = (sum & 0xffff0000) >> 16)) != 0)
 796:	cb 01       	movw	r24, r22
 798:	aa 27       	eor	r26, r26
 79a:	bb 27       	eor	r27, r27
 79c:	81 11       	cpse	r24, r1
 79e:	f5 cf       	rjmp	.-22     	; 0x78a <GenerateIPv4HeaderChecksum+0x48>
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <GenerateIPv4HeaderChecksum+0x66>
void GenerateIPv4HeaderChecksum(uint8_t *Header)
{
	// clear checksum
	Header[10] = 0;
	Header[11] = 0;
	uint32_t sum = 0;
 7a2:	40 e0       	ldi	r20, 0x00	; 0
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	ba 01       	movw	r22, r20
	while (((carry = (sum & 0xffff0000) >> 16)) != 0)
	{
		sum &= 0x0000ffff;
		sum += carry;
	}
	uint16_t checksum = ~sum;
 7a8:	40 95       	com	r20
 7aa:	50 95       	com	r21
	Header[10] = checksum >> 8;			// hi byte
 7ac:	52 87       	std	Z+10, r21	; 0x0a
	Header[11] = checksum & 0x00ff;		// lo byte
 7ae:	43 87       	std	Z+11, r20	; 0x0b
}
 7b0:	cf 91       	pop	r28
 7b2:	08 95       	ret

000007b4 <GenerateUDPChecksum>:
//			Header			- UDP pseudoheader
//			HLen			- pseudoheader length
//			DataStartAddr	- start address of data in general purpose buffer
//			DLen			- data length in bytes
uint16_t GenerateUDPChecksum(uint8_t *Header, uint16_t HLen, uint16_t DataStartAddr, uint16_t DLen)
{
 7b4:	8f 92       	push	r8
 7b6:	9f 92       	push	r9
 7b8:	af 92       	push	r10
 7ba:	bf 92       	push	r11
 7bc:	cf 92       	push	r12
 7be:	df 92       	push	r13
 7c0:	ef 92       	push	r14
 7c2:	ff 92       	push	r15
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	2a 97       	sbiw	r28, 0x0a	; 10
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	de bf       	out	0x3e, r29	; 62
 7d6:	7c 01       	movw	r14, r24
 7d8:	8b 01       	movw	r16, r22
 7da:	69 01       	movw	r12, r18
	volatile uint32_t sum = 0;
 7dc:	19 82       	std	Y+1, r1	; 0x01
 7de:	1a 82       	std	Y+2, r1	; 0x02
 7e0:	1b 82       	std	Y+3, r1	; 0x03
 7e2:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t carry;
	volatile uint16_t headSum, dataSum, checksum;

	if (DLen > 0)	// if data field is empty skip calculation od data checksum
 7e4:	23 2b       	or	r18, r19
 7e6:	51 f0       	breq	.+20     	; 0x7fc <GenerateUDPChecksum+0x48>
	{
		// Initialize DMA calculation of data checksum:
		// Set EDMAST to the start address
		ENC_WCRU(EDMAST, DataStartAddr);
 7e8:	ba 01       	movw	r22, r20
 7ea:	8a e0       	ldi	r24, 0x0A	; 10
 7ec:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ENC_WCRU>
		// Set EDMALEN to the length of the input data
		ENC_WCRU(EDMALEN, DLen);
 7f0:	b6 01       	movw	r22, r12
 7f2:	8c e0       	ldi	r24, 0x0C	; 12
 7f4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ENC_WCRU>
		// Clear DMACPY (ECON1<4>) to prevent a copy operation.
		// Clear DMANOCS (ECON1<2>) to select a	checksum calculation.
		// Clear DMACSSD (ECON1<3>) to use the default seed of 0000h.
		// Set DMAST to initiate the operation
		ENC_DMACKSUM();
 7f8:	0e 94 43 01 	call	0x286	; 0x286 <ENC_DMACKSUM>
	}

	// Calculate Header checksum. ENC simultaneously calculates data checksum.
	for(uint8_t i = 0; i < HLen; i+=2)
 7fc:	01 15       	cp	r16, r1
 7fe:	11 05       	cpc	r17, r1
 800:	09 f1       	breq	.+66     	; 0x844 <GenerateUDPChecksum+0x90>
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	20 e0       	ldi	r18, 0x00	; 0
	{
		sum += ((uint16_t)(Header[i])<<8) + Header[i+1];
 808:	49 81       	ldd	r20, Y+1	; 0x01
 80a:	5a 81       	ldd	r21, Y+2	; 0x02
 80c:	6b 81       	ldd	r22, Y+3	; 0x03
 80e:	7c 81       	ldd	r23, Y+4	; 0x04
 810:	f7 01       	movw	r30, r14
 812:	e8 0f       	add	r30, r24
 814:	f9 1f       	adc	r31, r25
 816:	80 81       	ld	r24, Z
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	98 2f       	mov	r25, r24
 81c:	88 27       	eor	r24, r24
 81e:	31 81       	ldd	r19, Z+1	; 0x01
 820:	83 0f       	add	r24, r19
 822:	91 1d       	adc	r25, r1
 824:	4a 01       	movw	r8, r20
 826:	5b 01       	movw	r10, r22
 828:	88 0e       	add	r8, r24
 82a:	99 1e       	adc	r9, r25
 82c:	a1 1c       	adc	r10, r1
 82e:	b1 1c       	adc	r11, r1
 830:	89 82       	std	Y+1, r8	; 0x01
 832:	9a 82       	std	Y+2, r9	; 0x02
 834:	ab 82       	std	Y+3, r10	; 0x03
 836:	bc 82       	std	Y+4, r11	; 0x04
		// Set DMAST to initiate the operation
		ENC_DMACKSUM();
	}

	// Calculate Header checksum. ENC simultaneously calculates data checksum.
	for(uint8_t i = 0; i < HLen; i+=2)
 838:	2e 5f       	subi	r18, 0xFE	; 254
 83a:	82 2f       	mov	r24, r18
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	80 17       	cp	r24, r16
 840:	91 07       	cpc	r25, r17
 842:	10 f3       	brcs	.-60     	; 0x808 <GenerateUDPChecksum+0x54>
	{
		sum += ((uint16_t)(Header[i])<<8) + Header[i+1];
	}
	// add carry
	while (((carry = (sum & 0xffff0000) >> 16)) != 0)
 844:	89 81       	ldd	r24, Y+1	; 0x01
 846:	9a 81       	ldd	r25, Y+2	; 0x02
 848:	ab 81       	ldd	r26, Y+3	; 0x03
 84a:	bc 81       	ldd	r27, Y+4	; 0x04
 84c:	cd 01       	movw	r24, r26
 84e:	aa 27       	eor	r26, r26
 850:	bb 27       	eor	r27, r27
 852:	88 23       	and	r24, r24
 854:	09 f1       	breq	.+66     	; 0x898 <GenerateUDPChecksum+0xe4>
	{
		sum &= 0x0000ffff;
 856:	49 81       	ldd	r20, Y+1	; 0x01
 858:	5a 81       	ldd	r21, Y+2	; 0x02
 85a:	6b 81       	ldd	r22, Y+3	; 0x03
 85c:	7c 81       	ldd	r23, Y+4	; 0x04
 85e:	66 27       	eor	r22, r22
 860:	77 27       	eor	r23, r23
 862:	49 83       	std	Y+1, r20	; 0x01
 864:	5a 83       	std	Y+2, r21	; 0x02
 866:	6b 83       	std	Y+3, r22	; 0x03
 868:	7c 83       	std	Y+4, r23	; 0x04
		sum += carry;
 86a:	49 81       	ldd	r20, Y+1	; 0x01
 86c:	5a 81       	ldd	r21, Y+2	; 0x02
 86e:	6b 81       	ldd	r22, Y+3	; 0x03
 870:	7c 81       	ldd	r23, Y+4	; 0x04
 872:	8a 01       	movw	r16, r20
 874:	9b 01       	movw	r18, r22
 876:	08 0f       	add	r16, r24
 878:	11 1d       	adc	r17, r1
 87a:	21 1d       	adc	r18, r1
 87c:	31 1d       	adc	r19, r1
 87e:	09 83       	std	Y+1, r16	; 0x01
 880:	1a 83       	std	Y+2, r17	; 0x02
 882:	2b 83       	std	Y+3, r18	; 0x03
 884:	3c 83       	std	Y+4, r19	; 0x04
	for(uint8_t i = 0; i < HLen; i+=2)
	{
		sum += ((uint16_t)(Header[i])<<8) + Header[i+1];
	}
	// add carry
	while (((carry = (sum & 0xffff0000) >> 16)) != 0)
 886:	89 81       	ldd	r24, Y+1	; 0x01
 888:	9a 81       	ldd	r25, Y+2	; 0x02
 88a:	ab 81       	ldd	r26, Y+3	; 0x03
 88c:	bc 81       	ldd	r27, Y+4	; 0x04
 88e:	cd 01       	movw	r24, r26
 890:	aa 27       	eor	r26, r26
 892:	bb 27       	eor	r27, r27
 894:	81 11       	cpse	r24, r1
 896:	df cf       	rjmp	.-66     	; 0x856 <GenerateUDPChecksum+0xa2>
	{
		sum &= 0x0000ffff;
		sum += carry;
	}
	headSum = sum;
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	9a 81       	ldd	r25, Y+2	; 0x02
 89c:	ab 81       	ldd	r26, Y+3	; 0x03
 89e:	bc 81       	ldd	r27, Y+4	; 0x04
 8a0:	8d 83       	std	Y+5, r24	; 0x05
 8a2:	9e 83       	std	Y+6, r25	; 0x06

	if (DLen > 0)
 8a4:	cd 28       	or	r12, r13
 8a6:	c9 f0       	breq	.+50     	; 0x8da <GenerateUDPChecksum+0x126>
	{
		// Wait for ENC DMA to finish data checksum calculation
		while (ENC_RCRU(ECON1) & ENC_ECON1_DMAST_bm);
 8a8:	8e e1       	ldi	r24, 0x1E	; 30
 8aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ENC_RCRU>
 8ae:	85 fd       	sbrc	r24, 5
 8b0:	fb cf       	rjmp	.-10     	; 0x8a8 <GenerateUDPChecksum+0xf4>

		// Read data checksum
		dataSum = ENC_RCRU(EDMACS);	// LO and HI byte swapped !?
 8b2:	80 e1       	ldi	r24, 0x10	; 16
 8b4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ENC_RCRU>
 8b8:	8f 83       	std	Y+7, r24	; 0x07
 8ba:	98 87       	std	Y+8, r25	; 0x08
		uint8_t lo = dataSum & 0x00ff;
 8bc:	8f 81       	ldd	r24, Y+7	; 0x07
 8be:	98 85       	ldd	r25, Y+8	; 0x08
		uint8_t hi = dataSum >> 8;
 8c0:	2f 81       	ldd	r18, Y+7	; 0x07
 8c2:	38 85       	ldd	r19, Y+8	; 0x08
		dataSum = ~((lo<<8) + hi);
 8c4:	58 2f       	mov	r21, r24
 8c6:	44 27       	eor	r20, r20
 8c8:	83 2f       	mov	r24, r19
 8ca:	99 27       	eor	r25, r25
 8cc:	84 0f       	add	r24, r20
 8ce:	95 1f       	adc	r25, r21
 8d0:	80 95       	com	r24
 8d2:	90 95       	com	r25
 8d4:	8f 83       	std	Y+7, r24	; 0x07
 8d6:	98 87       	std	Y+8, r25	; 0x08
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <GenerateUDPChecksum+0x12a>
	}
	else dataSum = 0;
 8da:	1f 82       	std	Y+7, r1	; 0x07
 8dc:	18 86       	std	Y+8, r1	; 0x08

	// Combine header and data checksum
	sum = (uint32_t)headSum + dataSum;		// 32 bit sum, otherwise carry will be discarded
 8de:	2d 81       	ldd	r18, Y+5	; 0x05
 8e0:	3e 81       	ldd	r19, Y+6	; 0x06
 8e2:	8f 81       	ldd	r24, Y+7	; 0x07
 8e4:	98 85       	ldd	r25, Y+8	; 0x08
 8e6:	a0 e0       	ldi	r26, 0x00	; 0
 8e8:	b0 e0       	ldi	r27, 0x00	; 0
 8ea:	82 0f       	add	r24, r18
 8ec:	93 1f       	adc	r25, r19
 8ee:	a1 1d       	adc	r26, r1
 8f0:	b1 1d       	adc	r27, r1
 8f2:	89 83       	std	Y+1, r24	; 0x01
 8f4:	9a 83       	std	Y+2, r25	; 0x02
 8f6:	ab 83       	std	Y+3, r26	; 0x03
 8f8:	bc 83       	std	Y+4, r27	; 0x04
	// add carry
	while (((carry = (sum & 0xffff0000) >> 16)) != 0)
 8fa:	89 81       	ldd	r24, Y+1	; 0x01
 8fc:	9a 81       	ldd	r25, Y+2	; 0x02
 8fe:	ab 81       	ldd	r26, Y+3	; 0x03
 900:	bc 81       	ldd	r27, Y+4	; 0x04
 902:	cd 01       	movw	r24, r26
 904:	aa 27       	eor	r26, r26
 906:	bb 27       	eor	r27, r27
 908:	88 23       	and	r24, r24
 90a:	09 f1       	breq	.+66     	; 0x94e <GenerateUDPChecksum+0x19a>
	{
		sum &= 0x0000ffff;
 90c:	49 81       	ldd	r20, Y+1	; 0x01
 90e:	5a 81       	ldd	r21, Y+2	; 0x02
 910:	6b 81       	ldd	r22, Y+3	; 0x03
 912:	7c 81       	ldd	r23, Y+4	; 0x04
 914:	66 27       	eor	r22, r22
 916:	77 27       	eor	r23, r23
 918:	49 83       	std	Y+1, r20	; 0x01
 91a:	5a 83       	std	Y+2, r21	; 0x02
 91c:	6b 83       	std	Y+3, r22	; 0x03
 91e:	7c 83       	std	Y+4, r23	; 0x04
		sum += carry;
 920:	49 81       	ldd	r20, Y+1	; 0x01
 922:	5a 81       	ldd	r21, Y+2	; 0x02
 924:	6b 81       	ldd	r22, Y+3	; 0x03
 926:	7c 81       	ldd	r23, Y+4	; 0x04
 928:	4a 01       	movw	r8, r20
 92a:	5b 01       	movw	r10, r22
 92c:	88 0e       	add	r8, r24
 92e:	91 1c       	adc	r9, r1
 930:	a1 1c       	adc	r10, r1
 932:	b1 1c       	adc	r11, r1
 934:	89 82       	std	Y+1, r8	; 0x01
 936:	9a 82       	std	Y+2, r9	; 0x02
 938:	ab 82       	std	Y+3, r10	; 0x03
 93a:	bc 82       	std	Y+4, r11	; 0x04
	else dataSum = 0;

	// Combine header and data checksum
	sum = (uint32_t)headSum + dataSum;		// 32 bit sum, otherwise carry will be discarded
	// add carry
	while (((carry = (sum & 0xffff0000) >> 16)) != 0)
 93c:	89 81       	ldd	r24, Y+1	; 0x01
 93e:	9a 81       	ldd	r25, Y+2	; 0x02
 940:	ab 81       	ldd	r26, Y+3	; 0x03
 942:	bc 81       	ldd	r27, Y+4	; 0x04
 944:	cd 01       	movw	r24, r26
 946:	aa 27       	eor	r26, r26
 948:	bb 27       	eor	r27, r27
 94a:	81 11       	cpse	r24, r1
 94c:	df cf       	rjmp	.-66     	; 0x90c <GenerateUDPChecksum+0x158>
	{
		sum &= 0x0000ffff;
		sum += carry;
	}
	sum = ~sum;
 94e:	89 81       	ldd	r24, Y+1	; 0x01
 950:	9a 81       	ldd	r25, Y+2	; 0x02
 952:	ab 81       	ldd	r26, Y+3	; 0x03
 954:	bc 81       	ldd	r27, Y+4	; 0x04
 956:	80 95       	com	r24
 958:	90 95       	com	r25
 95a:	a0 95       	com	r26
 95c:	b0 95       	com	r27
 95e:	89 83       	std	Y+1, r24	; 0x01
 960:	9a 83       	std	Y+2, r25	; 0x02
 962:	ab 83       	std	Y+3, r26	; 0x03
 964:	bc 83       	std	Y+4, r27	; 0x04
	checksum = sum != 0 ? sum : 0xffff;		// positive zero should be converted to negative zero
 966:	89 81       	ldd	r24, Y+1	; 0x01
 968:	9a 81       	ldd	r25, Y+2	; 0x02
 96a:	ab 81       	ldd	r26, Y+3	; 0x03
 96c:	bc 81       	ldd	r27, Y+4	; 0x04
 96e:	89 2b       	or	r24, r25
 970:	8a 2b       	or	r24, r26
 972:	8b 2b       	or	r24, r27
 974:	29 f0       	breq	.+10     	; 0x980 <GenerateUDPChecksum+0x1cc>
 976:	89 81       	ldd	r24, Y+1	; 0x01
 978:	9a 81       	ldd	r25, Y+2	; 0x02
 97a:	ab 81       	ldd	r26, Y+3	; 0x03
 97c:	bc 81       	ldd	r27, Y+4	; 0x04
 97e:	02 c0       	rjmp	.+4      	; 0x984 <GenerateUDPChecksum+0x1d0>
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	9f ef       	ldi	r25, 0xFF	; 255
 984:	89 87       	std	Y+9, r24	; 0x09
 986:	9a 87       	std	Y+10, r25	; 0x0a

	return checksum;
 988:	89 85       	ldd	r24, Y+9	; 0x09
 98a:	9a 85       	ldd	r25, Y+10	; 0x0a
 98c:	2a 96       	adiw	r28, 0x0a	; 10
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	de bf       	out	0x3e, r29	; 62
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	1f 91       	pop	r17
 998:	0f 91       	pop	r16
 99a:	ff 90       	pop	r15
 99c:	ef 90       	pop	r14
 99e:	df 90       	pop	r13
 9a0:	cf 90       	pop	r12
 9a2:	bf 90       	pop	r11
 9a4:	af 90       	pop	r10
 9a6:	9f 90       	pop	r9
 9a8:	8f 90       	pop	r8
 9aa:	08 95       	ret

000009ac <ENC_SendUDPFrame>:
//			BuffAddr					- Start address in general purpose buffer.
//			Len							- Length of Data field of UDP datagram. Total length of Ethernet frame to be transmitted is calculated inside function.
//			Data						- uint8_t array containing data. Maximum length is 1472 bytes (to satisfy max Ethernet frame payload limit of 1500 bytes).
//										  Minimum length is 0 bytes.
void ENC_SendUDPFrame(uint8_t *SourceIPAddr, uint8_t *DestIPAddr, uint8_t *DestMACAddr, uint16_t SourcePort, uint16_t DestPort, uint16_t BuffAddr, uint16_t Len, uint8_t *data)
{
 9ac:	2f 92       	push	r2
 9ae:	3f 92       	push	r3
 9b0:	4f 92       	push	r4
 9b2:	5f 92       	push	r5
 9b4:	6f 92       	push	r6
 9b6:	7f 92       	push	r7
 9b8:	8f 92       	push	r8
 9ba:	9f 92       	push	r9
 9bc:	af 92       	push	r10
 9be:	bf 92       	push	r11
 9c0:	cf 92       	push	r12
 9c2:	df 92       	push	r13
 9c4:	ef 92       	push	r14
 9c6:	ff 92       	push	r15
 9c8:	0f 93       	push	r16
 9ca:	1f 93       	push	r17
 9cc:	cf 93       	push	r28
 9ce:	df 93       	push	r29
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	e8 97       	sbiw	r28, 0x38	; 56
 9d6:	cd bf       	out	0x3d, r28	; 61
 9d8:	de bf       	out	0x3e, r29	; 62
 9da:	78 2e       	mov	r7, r24
 9dc:	69 2e       	mov	r6, r25
 9de:	56 2e       	mov	r5, r22
 9e0:	47 2e       	mov	r4, r23
 9e2:	94 2e       	mov	r9, r20
 9e4:	85 2e       	mov	r8, r21
 9e6:	22 2e       	mov	r2, r18
 9e8:	33 2e       	mov	r3, r19
	uint8_t dummy;
	uint8_t Header[UDP_HEADER_LEN];
	uint8_t UDPPseudoHeader[20];	// pseudo header for checksum calculation

	// set General Purpose Buffer Write Pointer (EGPWRPT) and start address (ETXST).
	ENC_WGPWRPT(BuffAddr);
 9ea:	c7 01       	movw	r24, r14
 9ec:	0e 94 3f 02 	call	0x47e	; 0x47e <ENC_WGPWRPT>
	ENC_WCRU(ETXST, BuffAddr);
 9f0:	b7 01       	movw	r22, r14
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ENC_WCRU>

	// len => ETXLEN (total number of bytes in Tx buffer: Ethernet frame header (8) + IPv4 header (20) + UDP header (8) + UDP data (Len) )
	ENC_WCRU(ETXLEN, UDP_HEADER_LEN + Len);
 9f8:	b6 01       	movw	r22, r12
 9fa:	6c 5d       	subi	r22, 0xDC	; 220
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	82 e0       	ldi	r24, 0x02	; 2
 a00:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ENC_WCRU>
 a04:	a9 2d       	mov	r26, r9
 a06:	b8 2d       	mov	r27, r8
 a08:	ce 01       	movw	r24, r28
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	4c 01       	movw	r8, r24
 a0e:	9e 01       	movw	r18, r28
 a10:	29 5f       	subi	r18, 0xF9	; 249
 a12:	3f 4f       	sbci	r19, 0xFF	; 255
 a14:	fc 01       	movw	r30, r24
	// destination MAC
	uint8_t headIdx = 0;
	uint8_t psHeadIdx = 0;
	for (uint8_t i = 0; i < 6; i++)
	{
		Header[headIdx++] = DestMACAddr[i];
 a16:	8d 91       	ld	r24, X+
 a18:	81 93       	st	Z+, r24

	// Ethernet header
	// destination MAC
	uint8_t headIdx = 0;
	uint8_t psHeadIdx = 0;
	for (uint8_t i = 0; i < 6; i++)
 a1a:	2e 17       	cp	r18, r30
 a1c:	3f 07       	cpc	r19, r31
 a1e:	d9 f7       	brne	.-10     	; 0xa16 <ENC_SendUDPFrame+0x6a>
	{
		Header[headIdx++] = DestMACAddr[i];
	}
	// Ethertype (0x0800)
	Header[headIdx++] = 0x08;
 a20:	88 e0       	ldi	r24, 0x08	; 8
 a22:	8f 83       	std	Y+7, r24	; 0x07
	Header[headIdx++] = 0x00;
 a24:	18 86       	std	Y+8, r1	; 0x08

	// IPv4 header
	// Version and IHL
	Header[headIdx++] = 0x45;	// version 4, header length 5 long words
 a26:	85 e4       	ldi	r24, 0x45	; 69
 a28:	89 87       	std	Y+9, r24	; 0x09
	// DSCP and ECN
	Header[headIdx++] = 0x00;
 a2a:	1a 86       	std	Y+10, r1	; 0x0a
	// Total length: IPv4 header (20) + UDP header (8) + UDP data (Len)
	uint16_t totalLen = 28 + Len;
 a2c:	c6 01       	movw	r24, r12
 a2e:	4c 96       	adiw	r24, 0x1c	; 28
	Header[headIdx++] = totalLen>>8;		// hi byte
 a30:	9b 87       	std	Y+11, r25	; 0x0b
	Header[headIdx++] = totalLen & 0xff;	// lo byte
 a32:	8c 87       	std	Y+12, r24	; 0x0c
	// ID, flags and fragment offset
	for (uint8_t i = 0; i < 4; i++)
	{
		Header[headIdx++] = 0x00;
 a34:	1d 86       	std	Y+13, r1	; 0x0d
 a36:	1e 86       	std	Y+14, r1	; 0x0e
 a38:	1f 86       	std	Y+15, r1	; 0x0f
 a3a:	18 8a       	std	Y+16, r1	; 0x10
	}
	// Time to live
	Header[headIdx++] = 0x80;
 a3c:	80 e8       	ldi	r24, 0x80	; 128
 a3e:	89 8b       	std	Y+17, r24	; 0x11
	// Protocol
	Header[headIdx++] = 0x11;	// UDP
 a40:	81 e1       	ldi	r24, 0x11	; 17
 a42:	8a 8b       	std	Y+18, r24	; 0x12
	// Header checksum
	Header[headIdx++] = 0x00;
 a44:	1b 8a       	std	Y+19, r1	; 0x13
	Header[headIdx++] = 0x00;
 a46:	1c 8a       	std	Y+20, r1	; 0x14
 a48:	87 2d       	mov	r24, r7
 a4a:	96 2d       	mov	r25, r6
 a4c:	be 01       	movw	r22, r28
 a4e:	6b 5e       	subi	r22, 0xEB	; 235
 a50:	7f 4f       	sbci	r23, 0xFF	; 255
 a52:	9e 01       	movw	r18, r28
 a54:	2b 5d       	subi	r18, 0xDB	; 219
 a56:	3f 4f       	sbci	r19, 0xFF	; 255
 a58:	fe 01       	movw	r30, r28
 a5a:	79 96       	adiw	r30, 0x19	; 25
	// Source IP
	for (uint8_t i = 0; i < 4; i++)
	{
		Header[headIdx++] = SourceIPAddr[i];
 a5c:	dc 01       	movw	r26, r24
 a5e:	4d 91       	ld	r20, X+
 a60:	cd 01       	movw	r24, r26
 a62:	db 01       	movw	r26, r22
 a64:	4d 93       	st	X+, r20
 a66:	bd 01       	movw	r22, r26
		UDPPseudoHeader[psHeadIdx++] = SourceIPAddr[i];
 a68:	d9 01       	movw	r26, r18
 a6a:	4d 93       	st	X+, r20
 a6c:	9d 01       	movw	r18, r26
	Header[headIdx++] = 0x11;	// UDP
	// Header checksum
	Header[headIdx++] = 0x00;
	Header[headIdx++] = 0x00;
	// Source IP
	for (uint8_t i = 0; i < 4; i++)
 a6e:	e6 17       	cp	r30, r22
 a70:	f7 07       	cpc	r31, r23
 a72:	a1 f7       	brne	.-24     	; 0xa5c <ENC_SendUDPFrame+0xb0>
 a74:	65 2d       	mov	r22, r5
 a76:	74 2d       	mov	r23, r4
 a78:	ce 01       	movw	r24, r28
 a7a:	89 96       	adiw	r24, 0x29	; 41
 a7c:	9e 01       	movw	r18, r28
 a7e:	23 5e       	subi	r18, 0xE3	; 227
 a80:	3f 4f       	sbci	r19, 0xFF	; 255
		UDPPseudoHeader[psHeadIdx++] = SourceIPAddr[i];
	}
	// Destination IP
	for (uint8_t i = 0; i < 4; i++)
	{
		Header[headIdx++] = DestIPAddr[i];
 a82:	db 01       	movw	r26, r22
 a84:	4d 91       	ld	r20, X+
 a86:	bd 01       	movw	r22, r26
 a88:	41 93       	st	Z+, r20
		UDPPseudoHeader[psHeadIdx++] = DestIPAddr[i];
 a8a:	dc 01       	movw	r26, r24
 a8c:	4d 93       	st	X+, r20
 a8e:	cd 01       	movw	r24, r26
	{
		Header[headIdx++] = SourceIPAddr[i];
		UDPPseudoHeader[psHeadIdx++] = SourceIPAddr[i];
	}
	// Destination IP
	for (uint8_t i = 0; i < 4; i++)
 a90:	2e 17       	cp	r18, r30
 a92:	3f 07       	cpc	r19, r31
 a94:	b1 f7       	brne	.-20     	; 0xa82 <ENC_SendUDPFrame+0xd6>
		Header[headIdx++] = DestIPAddr[i];
		UDPPseudoHeader[psHeadIdx++] = DestIPAddr[i];
	}

	// Calculate IPv4 header checksum
	GenerateIPv4HeaderChecksum(Header + 8);		// skip Ethernet header
 a96:	ce 01       	movw	r24, r28
 a98:	09 96       	adiw	r24, 0x09	; 9
 a9a:	0e 94 a1 03 	call	0x742	; 0x742 <GenerateIPv4HeaderChecksum>

	// UDP header
	Header[headIdx++] = SourcePort>>8;
 a9e:	3d 8e       	std	Y+29, r3	; 0x1d
	Header[headIdx++] = SourcePort & 0xff;
 aa0:	2e 8e       	std	Y+30, r2	; 0x1e
	Header[headIdx++] = DestPort>>8;
 aa2:	1f 8f       	std	Y+31, r17	; 0x1f
	Header[headIdx++] = DestPort & 0xff;
 aa4:	08 a3       	std	Y+32, r16	; 0x20
	Header[headIdx++] = (Len+8)>>8;
 aa6:	c6 01       	movw	r24, r12
 aa8:	08 96       	adiw	r24, 0x08	; 8
 aaa:	99 a3       	std	Y+33, r25	; 0x21
	Header[headIdx++] = (Len+8) & 0xff;
 aac:	88 e0       	ldi	r24, 0x08	; 8
 aae:	8c 0d       	add	r24, r12
 ab0:	8a a3       	std	Y+34, r24	; 0x22
	uint16_t chksumAddr = BuffAddr + headIdx;	// address of checksum field in buffer
 ab2:	37 01       	movw	r6, r14
 ab4:	b2 e2       	ldi	r27, 0x22	; 34
 ab6:	6b 0e       	add	r6, r27
 ab8:	71 1c       	adc	r7, r1
	Header[headIdx++] = 0x00;		// UDP checksum placeholder
 aba:	1b a2       	std	Y+35, r1	; 0x23
	Header[headIdx++] = 0x00;
 abc:	1c a2       	std	Y+36, r1	; 0x24

	// rest of pseudoheader
	UDPPseudoHeader[psHeadIdx++] = 0x00;
 abe:	1d a6       	std	Y+45, r1	; 0x2d
	UDPPseudoHeader[psHeadIdx++] = 0x11;
 ac0:	21 e1       	ldi	r18, 0x11	; 17
 ac2:	2e a7       	std	Y+46, r18	; 0x2e
	UDPPseudoHeader[psHeadIdx++] = (Len+8)>>8;
 ac4:	9f a7       	std	Y+47, r25	; 0x2f
	UDPPseudoHeader[psHeadIdx++] = (Len+8) & 0xff;
 ac6:	88 ab       	std	Y+48, r24	; 0x30
	UDPPseudoHeader[psHeadIdx++] = SourcePort>>8;
 ac8:	39 aa       	std	Y+49, r3	; 0x31
	UDPPseudoHeader[psHeadIdx++] = SourcePort & 0xff;
 aca:	2a aa       	std	Y+50, r2	; 0x32
	UDPPseudoHeader[psHeadIdx++] = DestPort>>8;
 acc:	1b ab       	std	Y+51, r17	; 0x33
	UDPPseudoHeader[psHeadIdx++] = DestPort & 0xff;
 ace:	0c ab       	std	Y+52, r16	; 0x34
	UDPPseudoHeader[psHeadIdx++] = (Len+8)>>8;
 ad0:	9d ab       	std	Y+53, r25	; 0x35
	UDPPseudoHeader[psHeadIdx++] = (Len+8) & 0xff;
 ad2:	8e ab       	std	Y+54, r24	; 0x36
	UDPPseudoHeader[psHeadIdx++] = 0x00;	// checksum placeholder
 ad4:	1f aa       	std	Y+55, r1	; 0x37
	UDPPseudoHeader[psHeadIdx++] = 0x00;
 ad6:	18 ae       	std	Y+56, r1	; 0x38

	
	// write data to buffer (send op code followed by n data bytes (CS asserted)
	SPI_CS_ON;
 ad8:	80 e1       	ldi	r24, 0x10	; 16
 ada:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	SPIC.DATA = WGPDATA;
 ade:	8a e2       	ldi	r24, 0x2A	; 42
 ae0:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	SPI_WAIT;
 ae4:	e0 ec       	ldi	r30, 0xC0	; 192
 ae6:	f8 e0       	ldi	r31, 0x08	; 8
 ae8:	82 81       	ldd	r24, Z+2	; 0x02
 aea:	88 23       	and	r24, r24
 aec:	ec f7       	brge	.-6      	; 0xae8 <ENC_SendUDPFrame+0x13c>
 aee:	9e 01       	movw	r18, r28
 af0:	2b 5d       	subi	r18, 0xDB	; 219
 af2:	3f 4f       	sbci	r19, 0xFF	; 255
	// Header
	for (uint8_t i = 0; i < UDP_HEADER_LEN; i++)
	{
		SPIC.DATA = Header[i];
 af4:	e0 ec       	ldi	r30, 0xC0	; 192
 af6:	f8 e0       	ldi	r31, 0x08	; 8
 af8:	d4 01       	movw	r26, r8
 afa:	8d 91       	ld	r24, X+
 afc:	4d 01       	movw	r8, r26
 afe:	83 83       	std	Z+3, r24	; 0x03
		SPI_WAIT;
 b00:	82 81       	ldd	r24, Z+2	; 0x02
 b02:	88 23       	and	r24, r24
 b04:	ec f7       	brge	.-6      	; 0xb00 <ENC_SendUDPFrame+0x154>
	// write data to buffer (send op code followed by n data bytes (CS asserted)
	SPI_CS_ON;
	SPIC.DATA = WGPDATA;
	SPI_WAIT;
	// Header
	for (uint8_t i = 0; i < UDP_HEADER_LEN; i++)
 b06:	28 15       	cp	r18, r8
 b08:	39 05       	cpc	r19, r9
 b0a:	b1 f7       	brne	.-20     	; 0xaf8 <ENC_SendUDPFrame+0x14c>
		SPIC.DATA = Header[i];
		SPI_WAIT;
	}

	// Data
	for (uint16_t i = 0; i < Len; i++)
 b0c:	c1 14       	cp	r12, r1
 b0e:	d1 04       	cpc	r13, r1
 b10:	69 f0       	breq	.+26     	; 0xb2c <ENC_SendUDPFrame+0x180>
 b12:	d5 01       	movw	r26, r10
 b14:	ac 0c       	add	r10, r12
 b16:	bd 1c       	adc	r11, r13
	{
		SPIC.DATA = data[i];
 b18:	e0 ec       	ldi	r30, 0xC0	; 192
 b1a:	f8 e0       	ldi	r31, 0x08	; 8
 b1c:	8d 91       	ld	r24, X+
 b1e:	83 83       	std	Z+3, r24	; 0x03
		SPI_WAIT;
 b20:	82 81       	ldd	r24, Z+2	; 0x02
 b22:	88 23       	and	r24, r24
 b24:	ec f7       	brge	.-6      	; 0xb20 <ENC_SendUDPFrame+0x174>
		SPIC.DATA = Header[i];
		SPI_WAIT;
	}

	// Data
	for (uint16_t i = 0; i < Len; i++)
 b26:	aa 16       	cp	r10, r26
 b28:	bb 06       	cpc	r11, r27
 b2a:	c1 f7       	brne	.-16     	; 0xb1c <ENC_SendUDPFrame+0x170>
	{
		SPIC.DATA = data[i];
		SPI_WAIT;
	}
	dummy = SPIC.DATA;	// to clear Interrupt Flag
 b2c:	00 ec       	ldi	r16, 0xC0	; 192
 b2e:	18 e0       	ldi	r17, 0x08	; 8
 b30:	f8 01       	movw	r30, r16
 b32:	83 81       	ldd	r24, Z+3	; 0x03
	SPI_CS_OFF;
 b34:	0f 2e       	mov	r0, r31
 b36:	f0 e6       	ldi	r31, 0x60	; 96
 b38:	af 2e       	mov	r10, r31
 b3a:	f6 e0       	ldi	r31, 0x06	; 6
 b3c:	bf 2e       	mov	r11, r31
 b3e:	f0 2d       	mov	r31, r0
 b40:	68 94       	set
 b42:	99 24       	eor	r9, r9
 b44:	94 f8       	bld	r9, 4
 b46:	d5 01       	movw	r26, r10
 b48:	15 96       	adiw	r26, 0x05	; 5
 b4a:	9c 92       	st	X, r9

	// generate and write checksum to transmit buffer
	int16_t checksum = GenerateUDPChecksum(UDPPseudoHeader, 20, BuffAddr + UDP_HEADER_LEN, Len);
 b4c:	a7 01       	movw	r20, r14
 b4e:	4c 5d       	subi	r20, 0xDC	; 220
 b50:	5f 4f       	sbci	r21, 0xFF	; 255
 b52:	96 01       	movw	r18, r12
 b54:	64 e1       	ldi	r22, 0x14	; 20
 b56:	70 e0       	ldi	r23, 0x00	; 0
 b58:	ce 01       	movw	r24, r28
 b5a:	85 96       	adiw	r24, 0x25	; 37
 b5c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <GenerateUDPChecksum>
 b60:	f8 2e       	mov	r15, r24
 b62:	e9 2e       	mov	r14, r25
	ENC_WGPWRPT(chksumAddr);
 b64:	c3 01       	movw	r24, r6
 b66:	0e 94 3f 02 	call	0x47e	; 0x47e <ENC_WGPWRPT>
	SPI_CS_ON;
 b6a:	f5 01       	movw	r30, r10
 b6c:	96 82       	std	Z+6, r9	; 0x06
	SPIC.DATA = WGPDATA;
 b6e:	8a e2       	ldi	r24, 0x2A	; 42
 b70:	d8 01       	movw	r26, r16
 b72:	13 96       	adiw	r26, 0x03	; 3
 b74:	8c 93       	st	X, r24
	SPI_WAIT;
 b76:	e0 ec       	ldi	r30, 0xC0	; 192
 b78:	f8 e0       	ldi	r31, 0x08	; 8
 b7a:	82 81       	ldd	r24, Z+2	; 0x02
 b7c:	88 23       	and	r24, r24
 b7e:	ec f7       	brge	.-6      	; 0xb7a <ENC_SendUDPFrame+0x1ce>
	SPIC.DATA = checksum>>8;
 b80:	e0 92 c3 08 	sts	0x08C3, r14	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	SPI_WAIT;
 b84:	e0 ec       	ldi	r30, 0xC0	; 192
 b86:	f8 e0       	ldi	r31, 0x08	; 8
 b88:	82 81       	ldd	r24, Z+2	; 0x02
 b8a:	88 23       	and	r24, r24
 b8c:	ec f7       	brge	.-6      	; 0xb88 <ENC_SendUDPFrame+0x1dc>
	SPIC.DATA = checksum & 0xff;
 b8e:	f0 92 c3 08 	sts	0x08C3, r15	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	SPI_WAIT;
 b92:	e0 ec       	ldi	r30, 0xC0	; 192
 b94:	f8 e0       	ldi	r31, 0x08	; 8
 b96:	82 81       	ldd	r24, Z+2	; 0x02
 b98:	88 23       	and	r24, r24
 b9a:	ec f7       	brge	.-6      	; 0xb96 <ENC_SendUDPFrame+0x1ea>
	dummy = SPIC.DATA;	// to clear Interrupt Flag
 b9c:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	SPI_CS_OFF;
 ba0:	80 e1       	ldi	r24, 0x10	; 16
 ba2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>


	// wait for completion of ongoing transmission
	while (ENC_RCRU(ECON1) & ENC_ECON1_TXRTS_bm);
 ba6:	8e e1       	ldi	r24, 0x1E	; 30
 ba8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <ENC_RCRU>
 bac:	81 fd       	sbrc	r24, 1
 bae:	fb cf       	rjmp	.-10     	; 0xba6 <ENC_SendUDPFrame+0x1fa>

	ENC_SETTXRTS();		// start transmission
 bb0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <ENC_SETTXRTS>

}
 bb4:	e8 96       	adiw	r28, 0x38	; 56
 bb6:	cd bf       	out	0x3d, r28	; 61
 bb8:	de bf       	out	0x3e, r29	; 62
 bba:	df 91       	pop	r29
 bbc:	cf 91       	pop	r28
 bbe:	1f 91       	pop	r17
 bc0:	0f 91       	pop	r16
 bc2:	ff 90       	pop	r15
 bc4:	ef 90       	pop	r14
 bc6:	df 90       	pop	r13
 bc8:	cf 90       	pop	r12
 bca:	bf 90       	pop	r11
 bcc:	af 90       	pop	r10
 bce:	9f 90       	pop	r9
 bd0:	8f 90       	pop	r8
 bd2:	7f 90       	pop	r7
 bd4:	6f 90       	pop	r6
 bd6:	5f 90       	pop	r5
 bd8:	4f 90       	pop	r4
 bda:	3f 90       	pop	r3
 bdc:	2f 90       	pop	r2
 bde:	08 95       	ret

00000be0 <main>:
	CCP = CCP_IOREG_gc;                                       // Security signature to modify clock
	CLK.CTRL = CLK_SCLKSEL_PLL_gc;                            // Select system clock source
	OSC.CTRL &= ~OSC_RC2MEN_bm;                               // Turn off 2MHz internal oscillator
	OSC.CTRL &= ~OSC_RC32MEN_bm;                              // Turn off 32MHz internal oscillator

	SPID_Init();
 be0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <ENC_Init>
 be4:	78 94       	sei
 be6:	ff cf       	rjmp	.-2      	; 0xbe6 <main+0x6>

00000be8 <__vector_2>:
	// SPI_D - Master mode 00, Clk_per / 4 (8MHz)
	SPID.CTRL= SPI_PRESCALER_DIV4_gc | SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc;
}

ISR(PORTC_INT0_vect)
{
 be8:	1f 92       	push	r1
 bea:	0f 92       	push	r0
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	0f 92       	push	r0
 bf0:	11 24       	eor	r1, r1
 bf2:	0b b6       	in	r0, 0x3b	; 59
 bf4:	0f 92       	push	r0
 bf6:	af 92       	push	r10
 bf8:	bf 92       	push	r11
 bfa:	cf 92       	push	r12
 bfc:	df 92       	push	r13
 bfe:	ef 92       	push	r14
 c00:	ff 92       	push	r15
 c02:	0f 93       	push	r16
 c04:	1f 93       	push	r17
 c06:	2f 93       	push	r18
 c08:	3f 93       	push	r19
 c0a:	4f 93       	push	r20
 c0c:	5f 93       	push	r21
 c0e:	6f 93       	push	r22
 c10:	7f 93       	push	r23
 c12:	8f 93       	push	r24
 c14:	9f 93       	push	r25
 c16:	af 93       	push	r26
 c18:	bf 93       	push	r27
 c1a:	ef 93       	push	r30
 c1c:	ff 93       	push	r31
	ENC_CLREIE();		// disable ENC interrupts (INT line goes inactive)
 c1e:	0e 94 32 01 	call	0x264	; 0x264 <ENC_CLREIE>

	// read packet
	if(ENC_RdUDPFrame(SourceAddr, DestAddr, &SourcePort, &DestPort, &Len, &data) == OK)
 c22:	0f 2e       	mov	r0, r31
 c24:	fc e1       	ldi	r31, 0x1C	; 28
 c26:	ef 2e       	mov	r14, r31
 c28:	f0 e2       	ldi	r31, 0x20	; 32
 c2a:	ff 2e       	mov	r15, r31
 c2c:	f0 2d       	mov	r31, r0
 c2e:	0a e1       	ldi	r16, 0x1A	; 26
 c30:	10 e2       	ldi	r17, 0x20	; 32
 c32:	26 e1       	ldi	r18, 0x16	; 22
 c34:	30 e2       	ldi	r19, 0x20	; 32
 c36:	48 e1       	ldi	r20, 0x18	; 24
 c38:	50 e2       	ldi	r21, 0x20	; 32
 c3a:	6e e1       	ldi	r22, 0x1E	; 30
 c3c:	70 e2       	ldi	r23, 0x20	; 32
 c3e:	82 e2       	ldi	r24, 0x22	; 34
 c40:	90 e2       	ldi	r25, 0x20	; 32
 c42:	0e 94 6f 02 	call	0x4de	; 0x4de <ENC_RdUDPFrame>
 c46:	81 11       	cpse	r24, r1
 c48:	1c c0       	rjmp	.+56     	; 0xc82 <__vector_2+0x9a>
	{	// if it is correct UDP frame, send it back
		ENC_SendUDPFrame(uC_IPAddr, PC_IPAddr, PC_MACAddr, 11000, 11000, 0, Len, data);
 c4a:	a0 90 1c 20 	lds	r10, 0x201C	; 0x80201c <data>
 c4e:	b0 90 1d 20 	lds	r11, 0x201D	; 0x80201d <data+0x1>
 c52:	c0 90 1a 20 	lds	r12, 0x201A	; 0x80201a <Len>
 c56:	d0 90 1b 20 	lds	r13, 0x201B	; 0x80201b <Len+0x1>
 c5a:	e1 2c       	mov	r14, r1
 c5c:	f1 2c       	mov	r15, r1
 c5e:	08 ef       	ldi	r16, 0xF8	; 248
 c60:	1a e2       	ldi	r17, 0x2A	; 42
 c62:	28 ef       	ldi	r18, 0xF8	; 248
 c64:	3a e2       	ldi	r19, 0x2A	; 42
 c66:	4a e0       	ldi	r20, 0x0A	; 10
 c68:	50 e2       	ldi	r21, 0x20	; 32
 c6a:	60 e1       	ldi	r22, 0x10	; 16
 c6c:	70 e2       	ldi	r23, 0x20	; 32
 c6e:	86 e0       	ldi	r24, 0x06	; 6
 c70:	90 e2       	ldi	r25, 0x20	; 32
 c72:	0e 94 d6 04 	call	0x9ac	; 0x9ac <ENC_SendUDPFrame>
		free(data);		// free allocated memory
 c76:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <data>
 c7a:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <data+0x1>
 c7e:	0e 94 f6 06 	call	0xdec	; 0xdec <free>
	}
	
	ENC_SETEIE();		// enable ENC interrupts (if interrupt is pending INT line goes active again)
 c82:	0e 94 a5 01 	call	0x34a	; 0x34a <ENC_SETEIE>
}
 c86:	ff 91       	pop	r31
 c88:	ef 91       	pop	r30
 c8a:	bf 91       	pop	r27
 c8c:	af 91       	pop	r26
 c8e:	9f 91       	pop	r25
 c90:	8f 91       	pop	r24
 c92:	7f 91       	pop	r23
 c94:	6f 91       	pop	r22
 c96:	5f 91       	pop	r21
 c98:	4f 91       	pop	r20
 c9a:	3f 91       	pop	r19
 c9c:	2f 91       	pop	r18
 c9e:	1f 91       	pop	r17
 ca0:	0f 91       	pop	r16
 ca2:	ff 90       	pop	r15
 ca4:	ef 90       	pop	r14
 ca6:	df 90       	pop	r13
 ca8:	cf 90       	pop	r12
 caa:	bf 90       	pop	r11
 cac:	af 90       	pop	r10
 cae:	0f 90       	pop	r0
 cb0:	0b be       	out	0x3b, r0	; 59
 cb2:	0f 90       	pop	r0
 cb4:	0f be       	out	0x3f, r0	; 63
 cb6:	0f 90       	pop	r0
 cb8:	1f 90       	pop	r1
 cba:	18 95       	reti

00000cbc <malloc>:
 cbc:	0f 93       	push	r16
 cbe:	1f 93       	push	r17
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	82 30       	cpi	r24, 0x02	; 2
 cc6:	91 05       	cpc	r25, r1
 cc8:	10 f4       	brcc	.+4      	; 0xcce <malloc+0x12>
 cca:	82 e0       	ldi	r24, 0x02	; 2
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <__flp>
 cd2:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <__flp+0x1>
 cd6:	20 e0       	ldi	r18, 0x00	; 0
 cd8:	30 e0       	ldi	r19, 0x00	; 0
 cda:	a0 e0       	ldi	r26, 0x00	; 0
 cdc:	b0 e0       	ldi	r27, 0x00	; 0
 cde:	30 97       	sbiw	r30, 0x00	; 0
 ce0:	19 f1       	breq	.+70     	; 0xd28 <malloc+0x6c>
 ce2:	40 81       	ld	r20, Z
 ce4:	51 81       	ldd	r21, Z+1	; 0x01
 ce6:	02 81       	ldd	r16, Z+2	; 0x02
 ce8:	13 81       	ldd	r17, Z+3	; 0x03
 cea:	48 17       	cp	r20, r24
 cec:	59 07       	cpc	r21, r25
 cee:	c8 f0       	brcs	.+50     	; 0xd22 <malloc+0x66>
 cf0:	84 17       	cp	r24, r20
 cf2:	95 07       	cpc	r25, r21
 cf4:	69 f4       	brne	.+26     	; 0xd10 <malloc+0x54>
 cf6:	10 97       	sbiw	r26, 0x00	; 0
 cf8:	31 f0       	breq	.+12     	; 0xd06 <malloc+0x4a>
 cfa:	12 96       	adiw	r26, 0x02	; 2
 cfc:	0c 93       	st	X, r16
 cfe:	12 97       	sbiw	r26, 0x02	; 2
 d00:	13 96       	adiw	r26, 0x03	; 3
 d02:	1c 93       	st	X, r17
 d04:	27 c0       	rjmp	.+78     	; 0xd54 <malloc+0x98>
 d06:	00 93 28 20 	sts	0x2028, r16	; 0x802028 <__flp>
 d0a:	10 93 29 20 	sts	0x2029, r17	; 0x802029 <__flp+0x1>
 d0e:	22 c0       	rjmp	.+68     	; 0xd54 <malloc+0x98>
 d10:	21 15       	cp	r18, r1
 d12:	31 05       	cpc	r19, r1
 d14:	19 f0       	breq	.+6      	; 0xd1c <malloc+0x60>
 d16:	42 17       	cp	r20, r18
 d18:	53 07       	cpc	r21, r19
 d1a:	18 f4       	brcc	.+6      	; 0xd22 <malloc+0x66>
 d1c:	9a 01       	movw	r18, r20
 d1e:	bd 01       	movw	r22, r26
 d20:	ef 01       	movw	r28, r30
 d22:	df 01       	movw	r26, r30
 d24:	f8 01       	movw	r30, r16
 d26:	db cf       	rjmp	.-74     	; 0xcde <malloc+0x22>
 d28:	21 15       	cp	r18, r1
 d2a:	31 05       	cpc	r19, r1
 d2c:	f9 f0       	breq	.+62     	; 0xd6c <malloc+0xb0>
 d2e:	28 1b       	sub	r18, r24
 d30:	39 0b       	sbc	r19, r25
 d32:	24 30       	cpi	r18, 0x04	; 4
 d34:	31 05       	cpc	r19, r1
 d36:	80 f4       	brcc	.+32     	; 0xd58 <malloc+0x9c>
 d38:	8a 81       	ldd	r24, Y+2	; 0x02
 d3a:	9b 81       	ldd	r25, Y+3	; 0x03
 d3c:	61 15       	cp	r22, r1
 d3e:	71 05       	cpc	r23, r1
 d40:	21 f0       	breq	.+8      	; 0xd4a <malloc+0x8e>
 d42:	fb 01       	movw	r30, r22
 d44:	82 83       	std	Z+2, r24	; 0x02
 d46:	93 83       	std	Z+3, r25	; 0x03
 d48:	04 c0       	rjmp	.+8      	; 0xd52 <malloc+0x96>
 d4a:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <__flp>
 d4e:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <__flp+0x1>
 d52:	fe 01       	movw	r30, r28
 d54:	32 96       	adiw	r30, 0x02	; 2
 d56:	44 c0       	rjmp	.+136    	; 0xde0 <malloc+0x124>
 d58:	fe 01       	movw	r30, r28
 d5a:	e2 0f       	add	r30, r18
 d5c:	f3 1f       	adc	r31, r19
 d5e:	81 93       	st	Z+, r24
 d60:	91 93       	st	Z+, r25
 d62:	22 50       	subi	r18, 0x02	; 2
 d64:	31 09       	sbc	r19, r1
 d66:	28 83       	st	Y, r18
 d68:	39 83       	std	Y+1, r19	; 0x01
 d6a:	3a c0       	rjmp	.+116    	; 0xde0 <malloc+0x124>
 d6c:	20 91 26 20 	lds	r18, 0x2026	; 0x802026 <__brkval>
 d70:	30 91 27 20 	lds	r19, 0x2027	; 0x802027 <__brkval+0x1>
 d74:	23 2b       	or	r18, r19
 d76:	41 f4       	brne	.+16     	; 0xd88 <malloc+0xcc>
 d78:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
 d7c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
 d80:	20 93 26 20 	sts	0x2026, r18	; 0x802026 <__brkval>
 d84:	30 93 27 20 	sts	0x2027, r19	; 0x802027 <__brkval+0x1>
 d88:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 d8c:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 d90:	21 15       	cp	r18, r1
 d92:	31 05       	cpc	r19, r1
 d94:	41 f4       	brne	.+16     	; 0xda6 <malloc+0xea>
 d96:	2d b7       	in	r18, 0x3d	; 61
 d98:	3e b7       	in	r19, 0x3e	; 62
 d9a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
 d9e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
 da2:	24 1b       	sub	r18, r20
 da4:	35 0b       	sbc	r19, r21
 da6:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <__brkval>
 daa:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <__brkval+0x1>
 dae:	e2 17       	cp	r30, r18
 db0:	f3 07       	cpc	r31, r19
 db2:	a0 f4       	brcc	.+40     	; 0xddc <malloc+0x120>
 db4:	2e 1b       	sub	r18, r30
 db6:	3f 0b       	sbc	r19, r31
 db8:	28 17       	cp	r18, r24
 dba:	39 07       	cpc	r19, r25
 dbc:	78 f0       	brcs	.+30     	; 0xddc <malloc+0x120>
 dbe:	ac 01       	movw	r20, r24
 dc0:	4e 5f       	subi	r20, 0xFE	; 254
 dc2:	5f 4f       	sbci	r21, 0xFF	; 255
 dc4:	24 17       	cp	r18, r20
 dc6:	35 07       	cpc	r19, r21
 dc8:	48 f0       	brcs	.+18     	; 0xddc <malloc+0x120>
 dca:	4e 0f       	add	r20, r30
 dcc:	5f 1f       	adc	r21, r31
 dce:	40 93 26 20 	sts	0x2026, r20	; 0x802026 <__brkval>
 dd2:	50 93 27 20 	sts	0x2027, r21	; 0x802027 <__brkval+0x1>
 dd6:	81 93       	st	Z+, r24
 dd8:	91 93       	st	Z+, r25
 dda:	02 c0       	rjmp	.+4      	; 0xde0 <malloc+0x124>
 ddc:	e0 e0       	ldi	r30, 0x00	; 0
 dde:	f0 e0       	ldi	r31, 0x00	; 0
 de0:	cf 01       	movw	r24, r30
 de2:	df 91       	pop	r29
 de4:	cf 91       	pop	r28
 de6:	1f 91       	pop	r17
 de8:	0f 91       	pop	r16
 dea:	08 95       	ret

00000dec <free>:
 dec:	cf 93       	push	r28
 dee:	df 93       	push	r29
 df0:	00 97       	sbiw	r24, 0x00	; 0
 df2:	09 f4       	brne	.+2      	; 0xdf6 <free+0xa>
 df4:	81 c0       	rjmp	.+258    	; 0xef8 <free+0x10c>
 df6:	fc 01       	movw	r30, r24
 df8:	32 97       	sbiw	r30, 0x02	; 2
 dfa:	12 82       	std	Z+2, r1	; 0x02
 dfc:	13 82       	std	Z+3, r1	; 0x03
 dfe:	a0 91 28 20 	lds	r26, 0x2028	; 0x802028 <__flp>
 e02:	b0 91 29 20 	lds	r27, 0x2029	; 0x802029 <__flp+0x1>
 e06:	10 97       	sbiw	r26, 0x00	; 0
 e08:	81 f4       	brne	.+32     	; 0xe2a <free+0x3e>
 e0a:	20 81       	ld	r18, Z
 e0c:	31 81       	ldd	r19, Z+1	; 0x01
 e0e:	82 0f       	add	r24, r18
 e10:	93 1f       	adc	r25, r19
 e12:	20 91 26 20 	lds	r18, 0x2026	; 0x802026 <__brkval>
 e16:	30 91 27 20 	lds	r19, 0x2027	; 0x802027 <__brkval+0x1>
 e1a:	28 17       	cp	r18, r24
 e1c:	39 07       	cpc	r19, r25
 e1e:	51 f5       	brne	.+84     	; 0xe74 <free+0x88>
 e20:	e0 93 26 20 	sts	0x2026, r30	; 0x802026 <__brkval>
 e24:	f0 93 27 20 	sts	0x2027, r31	; 0x802027 <__brkval+0x1>
 e28:	67 c0       	rjmp	.+206    	; 0xef8 <free+0x10c>
 e2a:	ed 01       	movw	r28, r26
 e2c:	20 e0       	ldi	r18, 0x00	; 0
 e2e:	30 e0       	ldi	r19, 0x00	; 0
 e30:	ce 17       	cp	r28, r30
 e32:	df 07       	cpc	r29, r31
 e34:	40 f4       	brcc	.+16     	; 0xe46 <free+0x5a>
 e36:	4a 81       	ldd	r20, Y+2	; 0x02
 e38:	5b 81       	ldd	r21, Y+3	; 0x03
 e3a:	9e 01       	movw	r18, r28
 e3c:	41 15       	cp	r20, r1
 e3e:	51 05       	cpc	r21, r1
 e40:	f1 f0       	breq	.+60     	; 0xe7e <free+0x92>
 e42:	ea 01       	movw	r28, r20
 e44:	f5 cf       	rjmp	.-22     	; 0xe30 <free+0x44>
 e46:	c2 83       	std	Z+2, r28	; 0x02
 e48:	d3 83       	std	Z+3, r29	; 0x03
 e4a:	40 81       	ld	r20, Z
 e4c:	51 81       	ldd	r21, Z+1	; 0x01
 e4e:	84 0f       	add	r24, r20
 e50:	95 1f       	adc	r25, r21
 e52:	c8 17       	cp	r28, r24
 e54:	d9 07       	cpc	r29, r25
 e56:	59 f4       	brne	.+22     	; 0xe6e <free+0x82>
 e58:	88 81       	ld	r24, Y
 e5a:	99 81       	ldd	r25, Y+1	; 0x01
 e5c:	84 0f       	add	r24, r20
 e5e:	95 1f       	adc	r25, r21
 e60:	02 96       	adiw	r24, 0x02	; 2
 e62:	80 83       	st	Z, r24
 e64:	91 83       	std	Z+1, r25	; 0x01
 e66:	8a 81       	ldd	r24, Y+2	; 0x02
 e68:	9b 81       	ldd	r25, Y+3	; 0x03
 e6a:	82 83       	std	Z+2, r24	; 0x02
 e6c:	93 83       	std	Z+3, r25	; 0x03
 e6e:	21 15       	cp	r18, r1
 e70:	31 05       	cpc	r19, r1
 e72:	29 f4       	brne	.+10     	; 0xe7e <free+0x92>
 e74:	e0 93 28 20 	sts	0x2028, r30	; 0x802028 <__flp>
 e78:	f0 93 29 20 	sts	0x2029, r31	; 0x802029 <__flp+0x1>
 e7c:	3d c0       	rjmp	.+122    	; 0xef8 <free+0x10c>
 e7e:	e9 01       	movw	r28, r18
 e80:	ea 83       	std	Y+2, r30	; 0x02
 e82:	fb 83       	std	Y+3, r31	; 0x03
 e84:	49 91       	ld	r20, Y+
 e86:	59 91       	ld	r21, Y+
 e88:	c4 0f       	add	r28, r20
 e8a:	d5 1f       	adc	r29, r21
 e8c:	ec 17       	cp	r30, r28
 e8e:	fd 07       	cpc	r31, r29
 e90:	61 f4       	brne	.+24     	; 0xeaa <free+0xbe>
 e92:	80 81       	ld	r24, Z
 e94:	91 81       	ldd	r25, Z+1	; 0x01
 e96:	84 0f       	add	r24, r20
 e98:	95 1f       	adc	r25, r21
 e9a:	02 96       	adiw	r24, 0x02	; 2
 e9c:	e9 01       	movw	r28, r18
 e9e:	88 83       	st	Y, r24
 ea0:	99 83       	std	Y+1, r25	; 0x01
 ea2:	82 81       	ldd	r24, Z+2	; 0x02
 ea4:	93 81       	ldd	r25, Z+3	; 0x03
 ea6:	8a 83       	std	Y+2, r24	; 0x02
 ea8:	9b 83       	std	Y+3, r25	; 0x03
 eaa:	e0 e0       	ldi	r30, 0x00	; 0
 eac:	f0 e0       	ldi	r31, 0x00	; 0
 eae:	12 96       	adiw	r26, 0x02	; 2
 eb0:	8d 91       	ld	r24, X+
 eb2:	9c 91       	ld	r25, X
 eb4:	13 97       	sbiw	r26, 0x03	; 3
 eb6:	00 97       	sbiw	r24, 0x00	; 0
 eb8:	19 f0       	breq	.+6      	; 0xec0 <free+0xd4>
 eba:	fd 01       	movw	r30, r26
 ebc:	dc 01       	movw	r26, r24
 ebe:	f7 cf       	rjmp	.-18     	; 0xeae <free+0xc2>
 ec0:	8d 91       	ld	r24, X+
 ec2:	9c 91       	ld	r25, X
 ec4:	11 97       	sbiw	r26, 0x01	; 1
 ec6:	9d 01       	movw	r18, r26
 ec8:	2e 5f       	subi	r18, 0xFE	; 254
 eca:	3f 4f       	sbci	r19, 0xFF	; 255
 ecc:	82 0f       	add	r24, r18
 ece:	93 1f       	adc	r25, r19
 ed0:	20 91 26 20 	lds	r18, 0x2026	; 0x802026 <__brkval>
 ed4:	30 91 27 20 	lds	r19, 0x2027	; 0x802027 <__brkval+0x1>
 ed8:	28 17       	cp	r18, r24
 eda:	39 07       	cpc	r19, r25
 edc:	69 f4       	brne	.+26     	; 0xef8 <free+0x10c>
 ede:	30 97       	sbiw	r30, 0x00	; 0
 ee0:	29 f4       	brne	.+10     	; 0xeec <free+0x100>
 ee2:	10 92 28 20 	sts	0x2028, r1	; 0x802028 <__flp>
 ee6:	10 92 29 20 	sts	0x2029, r1	; 0x802029 <__flp+0x1>
 eea:	02 c0       	rjmp	.+4      	; 0xef0 <free+0x104>
 eec:	12 82       	std	Z+2, r1	; 0x02
 eee:	13 82       	std	Z+3, r1	; 0x03
 ef0:	a0 93 26 20 	sts	0x2026, r26	; 0x802026 <__brkval>
 ef4:	b0 93 27 20 	sts	0x2027, r27	; 0x802027 <__brkval+0x1>
 ef8:	df 91       	pop	r29
 efa:	cf 91       	pop	r28
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
